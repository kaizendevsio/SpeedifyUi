@using XNetwork.Models

<!-- Adapter Card -->
<div class="bg-slate-800/50 border border-slate-700 rounded-xl px-3 py-3 shadow-lg flex items-center gap-3 text-sm @(IsOffline ? "opacity-60" : "")">
    <i class="@GetAdapterIcon() @GetAdapterIconColor() text-lg w-5 text-center"></i>
    <p class="font-semibold text-white flex-grow min-w-0 truncate">@AdapterName</p>
    
    @if (!IsOffline)
    {
        <div class="ml-auto flex items-center gap-3 sm:gap-4 flex-shrink-0 text-xs">
            <span class="inline-flex items-center gap-1.5">
                <i class="fas fa-arrow-down text-cyan-400"></i> @DownloadSpeed
            </span>
            <span class="hidden sm:inline-flex items-center gap-1.5">
                <i class="fas fa-arrow-up text-pink-400"></i> @UploadSpeed
            </span>
            <span class="inline-flex items-center gap-1.5">
                <i class="far fa-clock text-slate-400"></i> @Latency
            </span>
        </div>
    }
    
    <span class="text-xs font-medium @GetStatusPillClass() px-2.5 py-1 rounded-full flex-shrink-0 @(IsOffline ? "ml-auto" : "")">@Status</span>
    
    @if (!IsOffline && ShowMenu)
    {
        <button class="bg-slate-700 hover:bg-slate-600 text-gray-300 w-8 h-8 rounded-lg flex items-center justify-center transition-colors flex-shrink-0"
                @onclick="OnMenuClick">
            <i class="fas fa-ellipsis-v"></i>
        </button>
    }
</div>

@code {
    [Parameter] public string AdapterName { get; set; } = "";
    [Parameter] public string AdapterType { get; set; } = "wifi";
    [Parameter] public string Status { get; set; } = "Online";
    [Parameter] public string DownloadSpeed { get; set; } = "0.0";
    [Parameter] public string UploadSpeed { get; set; } = "0.0";
    [Parameter] public string Latency { get; set; } = "0ms";
    [Parameter] public bool IsOffline { get; set; } = false;
    [Parameter] public bool ShowMenu { get; set; } = true;
    [Parameter] public EventCallback OnMenuClick { get; set; }

    private string GetAdapterIcon()
    {
        return AdapterType.ToLowerInvariant() switch
        {
            "wifi" => "fas fa-wifi",
            "cellular" => "fas fa-signal",
            "ethernet" => "fas fa-ethernet",
            "wwan" => "fas fa-signal",
            "mobile" => "fas fa-signal",
            _ => "fas fa-network-wired"
        };
    }

    private string GetAdapterIconColor()
    {
        if (IsOffline)
            return "text-red-400";
            
        return Status.ToLowerInvariant() switch
        {
            "online" => "text-green-400",
            "connected" => "text-green-400",
            "standby" => "text-cyan-400",
            "connecting" => "text-yellow-400",
            _ => "text-gray-400"
        };
    }

    private string GetStatusPillClass()
    {
        return Status.ToLowerInvariant() switch
        {
            "online" => "bg-green-500/10 text-green-400",
            "connected" => "bg-green-500/10 text-green-400",
            "standby" => "bg-cyan-500/10 text-cyan-400",
            "connecting" => "bg-yellow-500/10 text-yellow-400",
            "offline" => "bg-red-500/10 text-red-400",
            "disconnected" => "bg-red-500/10 text-red-400",
            _ => "bg-gray-500/10 text-gray-400"
        };
    }
}