@page "/stats"
@inject XNetwork.Services.SpeedifyService SpeedifyService
@using XNetwork.Services
@inject IJSRuntime JS

<h2 class="text-lg font-semibold mb-4">Realtime Speeds</h2>

@if (error != null)
{
    <ErrorBanner Message="@error" Retry="Init"/>
}
else if (adapters == null)
{
    <p class="text-gray-500">Loading…</p>
}
else
{
    <div class="grid gap-4 sm:grid-cols-2">
        @foreach (var a in adapters)
        {
            <div class="bg-white p-3 rounded shadow">
                <h3 class="font-medium mb-1">@a.name (@a.isp)</h3>
                <canvas id="@($"c{a.adapterID}")" class="w-full h-44"></canvas>
            </div>
        }
    </div>
}

@code {
    IReadOnlyList<Adapter>? adapters;
    IJSObjectReference? js;
    string? error;

    protected override async Task OnInitializedAsync() => await Init();

    async Task Init()
    {
        try
        {
            adapters = await SpeedifyService.GetAdaptersAsync();
            js = await JS.InvokeAsync<IJSObjectReference>("import", "/js/charts.js");
            await js.InvokeVoidAsync("initAll", adapters.Select(a => $"c{a.adapterID}").ToArray());
            _ = Poll();
        }
        catch (SpeedifyException ex)
        {
            error = ex.Message;
        }
    }

    async Task Poll()
    {
        while (true)
        {
            await Task.Delay(1000);
            if (js == null) break;
            try
            {
                var s = await SpeedifyService.GetStatsAsync();
                var map = s.ToDictionary(x => x.adapter);
                var down = adapters!.Select(a => map.TryGetValue(a.adapterID, out var st) ? st.downBps / 1_000_000 : 0).ToArray();
                var up = adapters!.Select(a => map.TryGetValue(a.adapterID, out var st) ? st.upBps / 1_000_000 : 0).ToArray();
                await js.InvokeVoidAsync("updateAll", down, up);
            }
            catch
            {
            }
        }
    }

}