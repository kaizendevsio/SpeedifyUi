@page "/statistics"
@inject XNetwork.Services.SpeedifyService SpeedifyService
@inject IJSRuntime JSRuntime
@using System.Collections
@using XNetwork.Models
@implements IAsyncDisposable

<PageTitle>Live Statistics & Charts</PageTitle>

<div class="container mx-auto px-4 py-8 font-inter">

    <h1 class="text-3xl font-bold text-gray-800 mb-6">Live Speedify Statistics</h1>

    @if (_isInitialLoading && !_isStreaming)
    {
        <div class="bg-blue-100 border border-blue-400 text-blue-700 px-4 py-3 rounded-md relative mb-4" role="alert">
            <strong class="font-bold">Loading...</strong>
            <span class="block sm:inline">Fetching initial data and preparing charts, please wait.</span>
        </div>
    }
    else if (!string.IsNullOrEmpty(_errorMessage))
    {
        <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-md relative mb-4" role="alert">
            <strong class="font-bold">Error!</strong>
            <span class="block sm:inline">@_errorMessage</span>
        </div>
    }

    @if (_stats.Any())
    {
        <div class="hidden sm:block shadow overflow-hidden border-b border-gray-200 sm:rounded-lg mb-6">
            <table class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gray-700">
                    <tr>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-50 uppercase tracking-wider">Adapter / ISP</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-50 uppercase tracking-wider">DL (Mbps)</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-50 uppercase tracking-wider">UL (Mbps)</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-50 uppercase tracking-wider">RTT (ms)</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-50 uppercase tracking-wider">Loss (DL / UL) (%)</th>
                    </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-200">
                    @foreach (var stat in _stats.OrderBy(s => GetAdapterDisplayName(s.AdapterId)))
                    {
                        <tr class="hover:bg-gray-50">
                            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">@GetAdapterDisplayName(stat.AdapterId)</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-700">@(Math.Round(stat.ReceiveBps / (1000 * 1000), 2))</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-700">@(Math.Round(stat.SendBps / (1000 * 1000), 2))</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-700">@stat.LatencyMs</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-700">@Math.Round(stat.LossReceive, 2)% / @Math.Round(stat.LossSend, 2)%</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <div class="sm:hidden grid grid-cols-1 gap-4 mb-6">
            @foreach (var stat in _stats.OrderBy(s => GetAdapterDisplayName(s.AdapterId)))
            {
                <div class="bg-white shadow-lg rounded-lg p-4 border border-gray-200">
                    <h3 class="text-lg font-semibold text-blue-600 mb-2">@GetAdapterDisplayName(stat.AdapterId)</h3>
                    <div class="grid grid-cols-2 gap-x-4 gap-y-1 text-sm">
                        <span class="font-medium text-gray-600">Download:</span> <span class="text-gray-800">@(Math.Round(stat.ReceiveBps / (1000 * 1000), 2)) Mbps</span>
                        <span class="font-medium text-gray-600">Upload:</span> <span class="text-gray-800">@(Math.Round(stat.SendBps / (1000 * 1000), 2)) Mbps</span>
                        <span class="font-medium text-gray-600">RTT:</span> <span class="text-gray-800">@stat.LatencyMs ms</span>
                        <span class="font-medium text-gray-600">Loss (DL / UL):</span> <span class="text-gray-800">@Math.Round(stat.LossReceive, 2)% / @Math.Round(stat.LossSend, 2)%</span>
                    </div>
                </div>
            }
        </div>
    }
    else if (!_isInitialLoading && string.IsNullOrEmpty(_errorMessage))
    {
        <div class="bg-yellow-100 border border-yellow-400 text-yellow-700 px-4 py-3 rounded-md relative" role="alert">
            <strong class="font-bold">No Data</strong>
            <span class="block sm:inline">No statistics available. Ensure Speedify is running and connected, or try starting the stream.</span>
        </div>
    }

    @if (_jsModuleLoaded && _adapters.Any())
    {
        <h2 class="text-2xl font-semibold text-gray-700 my-6">Historical Data Charts</h2>
        @if (!_chartsSuccessfullyInitialized && _attemptedChartInitialization && !_isInitialLoading) 
        {
            <p class="text-orange-600 font-semibold mb-4">
                Charts could not be initialized. Please ensure Speedify is active and check the browser console for errors.
                @if(!string.IsNullOrEmpty(_chartInitializationErrorMessage)) { <br /><span class="text-sm">Details: @_chartInitializationErrorMessage</span> }
            </p>
        }
        
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
            <div>
                <h3 class="text-lg font-medium text-gray-600 mb-2">Download Speed (Mbps)</h3>
                <div class="chart-container h-64 md:h-80 bg-white p-4 rounded-lg shadow-md">
                    <canvas id="downloadChart"></canvas>
                </div>
            </div>
            <div>
                <h3 class="text-lg font-medium text-gray-600 mb-2">Upload Speed (Mbps)</h3>
                <div class="chart-container h-64 md:h-80 bg-white p-4 rounded-lg shadow-md">
                    <canvas id="uploadChart"></canvas>
                </div>
            </div>
            <div>
                <h3 class="text-lg font-medium text-gray-600 mb-2">RTT (ms)</h3>
                <div class="chart-container h-64 md:h-80 bg-white p-4 rounded-lg shadow-md">
                    <canvas id="rttChart"></canvas>
                </div>
            </div>
            <div>
                <h3 class="text-lg font-medium text-gray-600 mb-2">Loss (%)</h3>
                <div class="chart-container h-64 md:h-80 bg-white p-4 rounded-lg shadow-md">
                    <canvas id="lossChart"></canvas>
                </div>
            </div>
        </div>
    }
    else if (!_isInitialLoading && !_adapters.Any() && string.IsNullOrEmpty(_errorMessage)) 
    {
        <p class="text-gray-600 my-6">Adapter information not available, charts cannot be displayed.</p>
    }


    <div class="mt-8 flex space-x-3">
        <button
            class="px-6 py-2 rounded-md font-semibold text-white shadow-md focus:outline-none focus:ring-2 focus:ring-opacity-75
                   @(_isStreaming || _isInitialLoading ? "bg-gray-400 cursor-not-allowed" : "bg-blue-600 hover:bg-blue-700 focus:ring-blue-500")"
            @onclick="HandleStartStreaming" 
            disabled="@_isStreaming || isInitialLoading">
            @if(_isStreaming && !_isInitialLoading) { <text>Streaming...</text> } else { <text>Start Streaming</text>}
        </button>
        <button
            class="px-6 py-2 rounded-md font-semibold text-white shadow-md focus:outline-none focus:ring-2 focus:ring-opacity-75
                   @(!_isStreaming ? "bg-gray-400 cursor-not-allowed" : "bg-red-600 hover:bg-red-700 focus:ring-red-500")"
            @onclick="HandleStopStreaming"
            disabled="@(!_isStreaming)">
            Stop Streaming
        </button>
    </div>
</div>

@code {
    private List<ConnectionItem> _stats = new();
    private IReadOnlyList<Adapter> _adapters;
    private CancellationTokenSource? _statsCts;

    private bool _isInitialLoading = true;
    private bool _isStreaming = false;
    private string _errorMessage = string.Empty;
    private string _chartInitializationErrorMessage = string.Empty;

    private IJSObjectReference? _chartModule;
    private bool _jsModuleLoaded = false;
    private bool _chartsSuccessfullyInitialized = false;
    private bool _attemptedChartInitialization = false;
    private bool _readyForChartInitializationStep = false; // New flag for two-step init
    private Timer? _chartUpdateTimer;
    private bool _manualStartAttempted = false; 

    private Dictionary<string, Dictionary<string, double>> _batchedChartData = new()
    {
        { "downloadChart", new Dictionary<string, double>() },
        { "uploadChart", new Dictionary<string, double>() },
        { "rttChart", new Dictionary<string, double>() },
        { "lossChart", new Dictionary<string, double>() }
    };

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine($"Statistics.razor ({DateTime.Now:HH:mm:ss.fff}): OnInitializedAsync - Starting.");
        _isInitialLoading = true;
        Console.WriteLine($"Statistics.razor ({DateTime.Now:HH:mm:ss.fff}): OnInitializedAsync - Finished.");
    }

    private async Task LoadInitialData()
    {
        Console.WriteLine($"Statistics.razor ({DateTime.Now:HH:mm:ss.fff}): LoadInitialData - Starting.");
        try
        {
            _adapters = await SpeedifyService.GetAdaptersAsync();
            if (!_adapters.Any()) Console.WriteLine($"Statistics.razor ({DateTime.Now:HH:mm:ss.fff}): LoadInitialData - No adapters found.");
            else Console.WriteLine($"Statistics.razor ({DateTime.Now:HH:mm:ss.fff}): LoadInitialData - Loaded {_adapters.Count} adapters.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Statistics.razor ({DateTime.Now:HH:mm:ss.fff}): LoadInitialData - Error: {ex.Message}");
            _errorMessage = $"Could not load adapter information: {ex.Message}";
        }
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Console.WriteLine($"Statistics.razor ({DateTime.Now:HH:mm:ss.fff}): OnAfterRenderAsync - firstRender: {firstRender}, _jsModuleLoaded: {_jsModuleLoaded}, _chartsSuccessfullyInitialized: {_chartsSuccessfullyInitialized}, _readyForChartInitializationStep: {_readyForChartInitializationStep}");
        if (firstRender)
        {
            Console.WriteLine($"Statistics.razor ({DateTime.Now:HH:mm:ss.fff}): OnAfterRenderAsync (firstRender) - Step 1: Load JS Module & Adapters (adapters already loaded).");
            
            await LoadInitialData(); 
            await EnsureJsModuleIsLoaded(); // Loads JS module

            await Task.Delay(10);
            
            if (_jsModuleLoaded && _adapters.Any() && string.IsNullOrEmpty(_errorMessage))
            {
                // DOM for canvases should be rendered now because of the @if condition in HTML
                // Set flag to initialize charts in the *next* OnAfterRenderAsync cycle.
                _readyForChartInitializationStep = true; 
                Console.WriteLine($"Statistics.razor ({DateTime.Now:HH:mm:ss.fff}): OnAfterRenderAsync (firstRender) - JS Module loaded and adapters present. Ready for chart init step.");
                await InvokeAsync(StateHasChanged); // Trigger re-render so next OnAfterRender can init charts
            }
            else if (!_adapters.Any() && string.IsNullOrEmpty(_errorMessage))
            {
                 _errorMessage = "No network adapters found. Cannot display statistics or charts.";
                 Console.WriteLine($"Statistics.razor ({DateTime.Now:HH:mm:ss.fff}): OnAfterRenderAsync (firstRender) - No adapters, cannot proceed with charts.");
                 _isInitialLoading = false; // Stop initial loading as we can't proceed
                 await InvokeAsync(StateHasChanged);
            } else if (!_jsModuleLoaded && string.IsNullOrEmpty(_errorMessage)) {
                 _errorMessage = "Charting library failed to load. Charts unavailable.";
                 _isInitialLoading = false;
                 await InvokeAsync(StateHasChanged);
            }
            // isInitialLoading will be set to false after chart init attempt or if it fails
        }
        else if (_readyForChartInitializationStep && !_chartsSuccessfullyInitialized && _jsModuleLoaded && _adapters.Any())
        {
            Console.WriteLine($"Statistics.razor ({DateTime.Now:HH:mm:ss.fff}): OnAfterRenderAsync (subsequent, _readyForChartInitializationStep=true) - Step 2: Initialize Charts.");
            await InitializeChartsInternal(); // Attempt to initialize charts
            _readyForChartInitializationStep = false; // Reset flag

            if (_chartsSuccessfullyInitialized && !_isStreaming && !_manualStartAttempted && string.IsNullOrEmpty(_errorMessage))
            {
                Console.WriteLine($"Statistics.razor ({DateTime.Now:HH:mm:ss.fff}): OnAfterRenderAsync - Charts initialized, auto-starting stream.");
                await StartStreamingStatsInternal();
            }
            else
            {
                Console.WriteLine($"Statistics.razor ({DateTime.Now:HH:mm:ss.fff}): OnAfterRenderAsync - Post chart init - Auto-start conditions NOT met. Error: '{_errorMessage}', ChartsInit: {_chartsSuccessfullyInitialized}, Streaming: {_isStreaming}, ManualStart: {_manualStartAttempted}");
            }
            _isInitialLoading = false; // Initial setup phase is complete
            await InvokeAsync(StateHasChanged); // Update UI with chart status
        }
    }

    private async Task EnsureJsModuleIsLoaded()
    {
        if (_jsModuleLoaded) return;
        Console.WriteLine($"Statistics.razor ({DateTime.Now:HH:mm:ss.fff}): EnsureJsModuleIsLoaded - Attempting to load JS module.");
        try
        {
            _chartModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/statisticsCharts.js");
            _jsModuleLoaded = true;
            Console.WriteLine($"Statistics.razor ({DateTime.Now:HH:mm:ss.fff}): EnsureJsModuleIsLoaded - ChartJS module loaded successfully.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Statistics.razor ({DateTime.Now:HH:mm:ss.fff}): EnsureJsModuleIsLoaded - Error loading chart module: {ex.Message}");
            _errorMessage = "Failed to load charting library. Charts will not be available.";
            _jsModuleLoaded = false;
        }
    }

    private string GetAdapterDisplayName(string adapterId)
    {
        var adapter = _adapters.FirstOrDefault(a => a.AdapterId == adapterId);
        return adapter != null ? !string.IsNullOrWhiteSpace(adapter.Isp) ? $"{adapter.Isp} ({adapter.Name})" : adapter.Name : adapterId;
    }

    private async Task InitializeChartsInternal()
    {
        if (!_jsModuleLoaded || _chartModule == null || !_adapters.Any()) // Removed _chartsSuccessfullyInitialized from condition to allow re-attempt if needed by HandleStart
        {
            Console.WriteLine($"Statistics.razor ({DateTime.Now:HH:mm:ss.fff}): InitializeChartsInternal skipped. JSLoaded: {_jsModuleLoaded}, ChartModuleNull: {_chartModule == null}, AdaptersCount: {_adapters.Count}");
            _attemptedChartInitialization = true; // Mark that we tried
            return;
        }
        _attemptedChartInitialization = true;
        _chartInitializationErrorMessage = string.Empty;

        Console.WriteLine($"Statistics.razor ({DateTime.Now:HH:mm:ss.fff}): InitializeChartsInternal attempting...");
        var adapterIdsForChart = _adapters.Select(a => a.AdapterId).ToArray();
        var adapterDisplayNamesForChart = _adapters.Select(x => GetAdapterDisplayName(x.AdapterId)).ToArray();
        var initialTimestamp = DateTime.Now.ToString("HH:mm:ss");
        bool allChartsOk = true;
        List<string> failedCharts = new List<string>();

        try
        {
            if (!await _chartModule.InvokeAsync<bool>("initializeOrUpdateChart", "downloadChart", "Download (Mbps)", adapterIdsForChart, adapterDisplayNamesForChart, initialTimestamp)) { allChartsOk = false; failedCharts.Add("Download");}
            if (!await _chartModule.InvokeAsync<bool>("initializeOrUpdateChart", "uploadChart", "Upload (Mbps)", adapterIdsForChart, adapterDisplayNamesForChart, initialTimestamp)) { allChartsOk = false; failedCharts.Add("Upload");}
            if (!await _chartModule.InvokeAsync<bool>("initializeOrUpdateChart", "rttChart", "RTT (ms)", adapterIdsForChart, adapterDisplayNamesForChart, initialTimestamp)) { allChartsOk = false; failedCharts.Add("RTT");}
            if (!await _chartModule.InvokeAsync<bool>("initializeOrUpdateChart", "lossChart", "Loss (%)", adapterIdsForChart, adapterDisplayNamesForChart, initialTimestamp)) { allChartsOk = false; failedCharts.Add("Loss");}

            _chartsSuccessfullyInitialized = allChartsOk;
            if (allChartsOk) Console.WriteLine($"Statistics.razor ({DateTime.Now:HH:mm:ss.fff}): All charts initialized successfully.");
            else {
                 _chartInitializationErrorMessage = $"Failed to initialize: {string.Join(", ", failedCharts)} chart(s). Canvas elements might not be ready or other JS errors occurred.";
                 if(string.IsNullOrEmpty(_errorMessage)) _errorMessage = _chartInitializationErrorMessage;
                 Console.WriteLine($"Statistics.razor ({DateTime.Now:HH:mm:ss.fff}): One or more charts failed to initialize: {string.Join(", ", failedCharts)}");
            }
        }
        catch (JSException ex)
        {
            Console.WriteLine($"Statistics.razor ({DateTime.Now:HH:mm:ss.fff}): JSException during chart initialization: {ex.Message}");
            _chartInitializationErrorMessage = $"JS Error during chart setup: {ex.Message.Split('\n')[0]}.";
            if(string.IsNullOrEmpty(_errorMessage)) _errorMessage = _chartInitializationErrorMessage;
            _chartsSuccessfullyInitialized = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Statistics.razor ({DateTime.Now:HH:mm:ss.fff}): General exception during chart initialization: {ex.Message}");
            _chartInitializationErrorMessage = "An unexpected error occurred while setting up charts.";
            if(string.IsNullOrEmpty(_errorMessage)) _errorMessage = _chartInitializationErrorMessage;
            _chartsSuccessfullyInitialized = false;
        }
    }
    
    private async Task HandleStartStreaming()
    {
        if (_isStreaming) return;
        _manualStartAttempted = true;
        _isInitialLoading = true; 
        _errorMessage = string.Empty; 
        _chartInitializationErrorMessage = string.Empty;
        await InvokeAsync(StateHasChanged);

        if (!_adapters.Any()) await LoadInitialData();
        if (!_adapters.Any()) {
            _errorMessage = "No adapters loaded. Cannot start streaming.";
            _isInitialLoading = false; await InvokeAsync(StateHasChanged); return;
        }
        
        await EnsureJsModuleIsLoaded();
        if (!_jsModuleLoaded) {
             if(string.IsNullOrEmpty(_errorMessage)) _errorMessage = "Charting system failed to load. Cannot start streaming.";
             _isInitialLoading = false; await InvokeAsync(StateHasChanged); return;
        }
        
        // Always attempt to initialize charts if not already successful, as DOM might be ready now.
        if (!_chartsSuccessfullyInitialized) await InitializeChartsInternal(); 
        
        if (!_chartsSuccessfullyInitialized) {
             if(string.IsNullOrEmpty(_errorMessage)) _errorMessage = "Charts not initialized. Cannot start streaming.";
             _isInitialLoading = false; await InvokeAsync(StateHasChanged); return;
        }
        
        await StartStreamingStatsInternal();
    }

    private async Task StartStreamingStatsInternal() 
    {
        if (_isStreaming) return;
        if (!_chartsSuccessfullyInitialized) { 
            _errorMessage = "Cannot start streaming: Charts are not ready.";
            _isInitialLoading = false; await InvokeAsync(StateHasChanged); return;
        }

        Console.WriteLine($"Statistics.razor ({DateTime.Now:HH:mm:ss.fff}): StartStreamingStatsInternal called.");
        StopStreamingStatsInternal(false); 
        _statsCts = new CancellationTokenSource();
        _isStreaming = true;
        
        await InvokeAsync(StateHasChanged); 

        try
        {
            _chartUpdateTimer?.Dispose();
            _chartUpdateTimer = new Timer(PushBatchedChartDataToJs, null, TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(1.1));

            await foreach (var statEntry in SpeedifyService.GetStatsAsync(_statsCts.Token))
            {
                if (_isInitialLoading) _isInitialLoading = false;

                var existingStatIndex = _stats.FindIndex(s => s.AdapterId == statEntry.AdapterId);
                if (existingStatIndex != -1) _stats[existingStatIndex] = statEntry;
                else _stats.Add(statEntry);

                string adapterDisplayName = GetAdapterDisplayName(statEntry.AdapterId);
                _batchedChartData["downloadChart"][adapterDisplayName] = Math.Round(statEntry.ReceiveBps / (1000 * 1000), 2);
                _batchedChartData["uploadChart"][adapterDisplayName] = Math.Round(statEntry.SendBps / (1000 * 1000), 2);
                _batchedChartData["rttChart"][adapterDisplayName] = statEntry.LatencyMs;
                _batchedChartData["lossChart"][adapterDisplayName] = Math.Round(statEntry.LossReceive + statEntry.LossSend, 2);
                
                await InvokeAsync(StateHasChanged); 
            }
        }
        catch (OperationCanceledException)
        {
            Console.WriteLine($"Statistics.razor ({DateTime.Now:HH:mm:ss.fff}): Statistics streaming was canceled.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Statistics.razor ({DateTime.Now:HH:mm:ss.fff}): Error during statistics streaming: {ex.Message}\n{ex.StackTrace}");
            _errorMessage = $"Streaming error: {ex.Message.Split('\n')[0]}";
        }
        finally
        {
            Console.WriteLine($"Statistics.razor ({DateTime.Now:HH:mm:ss.fff}): Streaming loop finished or was broken.");
            _isStreaming = false;
            _isInitialLoading = false; 
            _chartUpdateTimer?.Dispose(); _chartUpdateTimer = null;
            await InvokeAsync(StateHasChanged);
        }
    }
    
    private async void PushBatchedChartDataToJs(object? state)
    {
        if (!_chartsSuccessfullyInitialized || _chartModule == null || !_isStreaming || (_statsCts?.IsCancellationRequested ?? true)) return;
        string currentTime = DateTime.Now.ToString("HH:mm:ss");
        try
        {
            var dlData = new Dictionary<string, double>(_batchedChartData["downloadChart"]);
            var ulData = new Dictionary<string, double>(_batchedChartData["uploadChart"]);
            var rttData = new Dictionary<string, double>(_batchedChartData["rttChart"]);
            var lossData = new Dictionary<string, double>(_batchedChartData["lossChart"]);

            if (dlData.Any()) await _chartModule.InvokeVoidAsync("addDataToChart", "downloadChart", currentTime, dlData);
            if (ulData.Any()) await _chartModule.InvokeVoidAsync("addDataToChart", "uploadChart", currentTime, ulData);
            if (rttData.Any()) await _chartModule.InvokeVoidAsync("addDataToChart", "rttChart", currentTime, rttData);
            if (lossData.Any()) await _chartModule.InvokeVoidAsync("addDataToChart", "lossChart", currentTime, lossData);

            if (dlData.Any()) _batchedChartData["downloadChart"].Clear();
            if (ulData.Any()) _batchedChartData["uploadChart"].Clear();
            if (rttData.Any()) _batchedChartData["rttChart"].Clear();
            if (lossData.Any()) _batchedChartData["lossChart"].Clear();
        }
        catch (JSDisconnectedException ex) {
            Console.WriteLine($"Statistics.razor ({DateTime.Now:HH:mm:ss.fff}): JSDisconnectedException in PushBatchedChartDataToJs: {ex.Message}. Stopping stream.");
            await InvokeAsync(() => StopStreamingStatsInternal(true)); 
        }
        catch (ObjectDisposedException ode) { 
             Console.WriteLine($"Statistics.razor ({DateTime.Now:HH:mm:ss.fff}): ObjectDisposedException in PushBatchedChartDataToJs (likely _chartModule): {ode.Message}.");
        }
        catch (Exception ex) { Console.WriteLine($"Statistics.razor ({DateTime.Now:HH:mm:ss.fff}): Error in PushBatchedChartDataToJs: {ex.Message}"); }
    }

    private void HandleStopStreaming() { StopStreamingStatsInternal(true); }

    private void StopStreamingStatsInternal(bool triggerStateHasChanged = true)
    {
        _chartUpdateTimer?.Dispose(); _chartUpdateTimer = null;
        if (_statsCts != null)
        {
            if (!_statsCts.IsCancellationRequested) _statsCts.Cancel();
            _statsCts.Dispose(); _statsCts = null;
        }
        if (_isStreaming) 
        {
            _isStreaming = false;
            Console.WriteLine($"Statistics.razor ({DateTime.Now:HH:mm:ss.fff}): Streaming stopped.");
            if(triggerStateHasChanged) InvokeAsync(StateHasChanged); 
        }
    }

    public async ValueTask DisposeAsync()
    {
        Console.WriteLine($"Statistics.razor ({DateTime.Now:HH:mm:ss.fff}): DisposeAsync called.");
        StopStreamingStatsInternal(false); 
        if (_chartModule != null)
        {
            try
            {
                if (_chartsSuccessfullyInitialized) await _chartModule.InvokeVoidAsync("disposeAllCharts");
                await _chartModule.DisposeAsync();
                Console.WriteLine($"Statistics.razor ({DateTime.Now:HH:mm:ss.fff}): Chart module disposed.");
            }
            catch(Exception ex) { Console.WriteLine($"Statistics.razor ({DateTime.Now:HH:mm:ss.fff}): Error disposing chart module: {ex.Message}"); }
            finally { _chartModule = null; _chartsSuccessfullyInitialized = false; }
        }
    }
}
