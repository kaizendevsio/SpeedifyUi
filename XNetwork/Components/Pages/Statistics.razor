@page "/statistics"
@inject XNetwork.Services.SpeedifyService SpeedifyService
@implements IAsyncDisposable

<PageTitle>Live Statistics</PageTitle>

<div class="container mx-auto px-4 py-8 font-inter">

    <h1 class="text-3xl font-bold text-gray-800 mb-6">Live Speedify Statistics</h1>

    @if (isLoading && !_stats.Any())
    {
        <div class="bg-blue-100 border border-blue-400 text-blue-700 px-4 py-3 rounded relative mb-4" role="alert">
            <strong class="font-bold">Loading...</strong>
            <span class="block sm:inline">Fetching initial statistics, please wait.</span>
        </div>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4" role="alert">
            <strong class="font-bold">Error!</strong>
            <span class="block sm:inline">@errorMessage</span>
        </div>
    }

    @if (_stats.Any())
    {
        <div class="shadow overflow-hidden border-b border-gray-200 sm:rounded-lg mb-6">
            <table class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gray-700">
                    <tr>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-50 uppercase tracking-wider">
                            Adapter ID
                        </th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-50 uppercase tracking-wider">
                            Download (Mbps)
                        </th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-50 uppercase tracking-wider">
                            Upload (Mbps)
                        </th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-50 uppercase tracking-wider">
                            RTT (ms)
                        </th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-50 uppercase tracking-wider">
                            Loss (%)
                        </th>
                    </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-200">
                    @foreach (var stat in _stats.OrderBy(s => s.Adapter))
                    {
                        <tr class="hover:bg-gray-100">
                            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">@stat.Adapter</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-700">@(Math.Round(stat.DownBps / (1000 * 1000), 2))</td> <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-700">@(Math.Round(stat.UpBps / (1000 * 1000), 2))</td>   <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-700">@stat.RttMs</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-700">@Math.Round(stat.LossPct, 2)</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else if (!isLoading && string.IsNullOrEmpty(errorMessage))
    {
        <div class="bg-yellow-100 border border-yellow-400 text-yellow-700 px-4 py-3 rounded relative" role="alert">
            <strong class="font-bold">No Data</strong>
            <span class="block sm:inline">No statistics available. Ensure Speedify is running and connected, or try starting the stream.</span>
        </div>
    }

    <div class="mt-6 flex space-x-3">
        <button 
            class="px-6 py-2 rounded-md font-semibold text-white shadow-md focus:outline-none focus:ring-2 focus:ring-opacity-75
                   @(isStreaming ? "bg-gray-400 cursor-not-allowed" : "bg-blue-600 hover:bg-blue-700 focus:ring-blue-500")"
            @onclick="StartStreamingStats" 
            disabled="@isStreaming">
            Start Streaming
        </button>
        <button 
            class="px-6 py-2 rounded-md font-semibold text-white shadow-md focus:outline-none focus:ring-2 focus:ring-opacity-75
                   @(!isStreaming ? "bg-gray-400 cursor-not-allowed" : "bg-red-600 hover:bg-red-700 focus:ring-red-500")"
            @onclick="StopStreamingStats" 
            disabled="@(!isStreaming)">
            Stop Streaming
        </button>
    </div>
</div>

@code {
    // Assuming XNetwork.Services.Stats record is:
    // public record Stats(string AdapterID, double DownBps, double UpBps, double RttMs, double LossPct);

    private List<XNetwork.Services.Stats> _stats = new List<XNetwork.Services.Stats>();
    private CancellationTokenSource _statsCts;
    private bool isLoading = true; // Start with loading true
    private bool isStreaming = false;
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        // Automatically start streaming when the page loads.
        // The isLoading flag will be managed within StartStreamingStats
        await StartStreamingStats();
    }

    private async Task StartStreamingStats()
    {
        if (isStreaming) return;

        StopStreamingStats(); 
        _statsCts = new CancellationTokenSource();
        
        isStreaming = true;
        isLoading = !_stats.Any(); // Set loading to true only if there are no stats yet.
        errorMessage = string.Empty;
        await InvokeAsync(StateHasChanged);

        try
        {
            await foreach (var statEntry in SpeedifyService.GetStatsAsync(_statsCts.Token))
            {
                if (isLoading) // Turn off initial loading once first stat comes in
                {
                    isLoading = false;
                }

                var existingStatIndex = _stats.FindIndex(s => s.Adapter == statEntry.Adapter);
                if (existingStatIndex != -1)
                {
                    _stats[existingStatIndex] = statEntry;
                }
                else
                {
                    _stats.Add(statEntry);
                }
                await InvokeAsync(StateHasChanged); // Update UI as each stat entry arrives
            }
            // This part might not be reached if the stream is continuous and only ends on cancellation
            isLoading = false; 
        }
        catch (OperationCanceledException)
        {
            Console.WriteLine("Statistics streaming was canceled by the user or component disposal.");
            errorMessage = "Streaming stopped.";
            isLoading = false; // Ensure loading is false if canceled
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error streaming statistics: {ex.Message}");
            Console.WriteLine(ex.StackTrace);
            errorMessage = $"An error occurred: {ex.Message}";
            isLoading = false; // Ensure loading is false on error
        }
        finally
        {
            isStreaming = false;
            // isLoading is set within catch blocks or after first stat
            await InvokeAsync(StateHasChanged);
        }
    }

    private void StopStreamingStats()
    {
        if (_statsCts != null)
        {
            _statsCts.Cancel();
            _statsCts.Dispose();
            _statsCts = null;
        }
        if (isStreaming) // Only log and change state if it was actually streaming
        {
            isStreaming = false;
            Console.WriteLine("Streaming stopped.");
            InvokeAsync(StateHasChanged); // Update UI to reflect stopped state
        }
    }

    public async ValueTask DisposeAsync()
    {
        StopStreamingStats();
        await Task.CompletedTask; 
    }
}
