@page "/ai-chat"
@inject IJSRuntime JSRuntime

<PageTitle>AI Assistant - X Network</PageTitle>

<div class="flex flex-col h-[calc(100vh-6rem)] md:h-[calc(100vh-3rem)] p-4 md:p-6">
    <div class="mb-6">
        <h2 class="text-3xl font-bold text-white mb-1">AI Assistant</h2>
        <p class="text-slate-400">Ask about network status or get troubleshooting help.</p>
    </div>
    
    <!-- Chat Messages Area -->
    <div class="flex-1 overflow-y-auto space-y-4 p-4 bg-slate-800/50 rounded-t-lg border border-b-0 border-slate-700">
        @foreach (var message in _messages)
        {
            @if (message.IsAi)
            {
                <!-- AI Message -->
                <div class="flex gap-3 max-w-md">
                    <div class="w-8 h-8 rounded-full bg-blue-500 flex-shrink-0 flex items-center justify-center">
                        <i class="fas fa-robot text-white text-sm"></i>
                    </div>
                    <div class="bg-slate-700 p-3 rounded-lg rounded-tl-none">
                        <p class="text-sm text-gray-200">@message.Content</p>
                    </div>
                </div>
            }
            else
            {
                <!-- User Message -->
                <div class="flex gap-3 justify-end">
                    <div class="bg-blue-600 p-3 rounded-lg rounded-br-none max-w-md">
                        <p class="text-sm text-white">@message.Content</p>
                    </div>
                </div>
            }
        }
        
        @if (_isTyping)
        {
            <!-- Typing indicator -->
            <div class="flex gap-3 max-w-md">
                <div class="w-8 h-8 rounded-full bg-blue-500 flex-shrink-0 flex items-center justify-center">
                    <i class="fas fa-robot text-white text-sm"></i>
                </div>
                <div class="bg-slate-700 p-3 rounded-lg rounded-tl-none">
                    <p class="text-sm text-gray-400">Typing...</p>
                </div>
            </div>
        }
        
        <!-- Auto-scroll anchor -->
        <div @ref="_messagesEnd"></div>
    </div>

    <!-- Chat Input -->
    <div class="bg-slate-800/50 p-3 rounded-b-lg border border-t-0 border-slate-700">
        <div class="flex items-center gap-3">
            <input type="text" 
                   @bind="_messageInput" 
                   @bind:event="oninput"
                   @onkeydown="HandleKeyDown"
                   placeholder="Ask the AI assistant..." 
                   disabled="@_isTyping"
                   class="flex-1 bg-slate-900 border border-slate-700 rounded-full py-2.5 px-4 text-white focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none transition-colors disabled:opacity-50">
            <button class="bg-blue-600 hover:bg-blue-700 text-white w-10 h-10 rounded-full flex items-center justify-center transition-colors flex-shrink-0 disabled:opacity-50 disabled:cursor-not-allowed"
                    @onclick="SendMessage"
                    disabled="@(string.IsNullOrWhiteSpace(_messageInput) || _isTyping)">
                <i class="fas fa-paper-plane"></i>
            </button>
        </div>
    </div>
</div>

@code {
    private List<ChatMessage> _messages = new();
    private string _messageInput = "";
    private bool _isTyping = false;
    private ElementReference _messagesEnd;

    protected override void OnInitialized()
    {
        // Add welcome message
        _messages.Add(new ChatMessage
        {
            IsAi = true,
            Content = "Hello! How can I help you with your network today? You can ask things like \"What's the status of my adapters?\" or \"Why is my latency high?\"."
        });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // Auto-scroll to bottom when new messages are added
        try
        {
            await JSRuntime.InvokeVoidAsync("scrollToElement", _messagesEnd);
        }
        catch
        {
            // Ignore if element reference is not available
        }
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(_messageInput)) return;

        var userMessage = _messageInput.Trim();
        _messageInput = "";
        
        // Add user message
        _messages.Add(new ChatMessage
        {
            IsAi = false,
            Content = userMessage
        });

        _isTyping = true;
        await InvokeAsync(StateHasChanged);

        // Simulate AI response (in a real implementation, this would call an AI service)
        await Task.Delay(1000);

        var aiResponse = GenerateResponse(userMessage);
        _messages.Add(new ChatMessage
        {
            IsAi = true,
            Content = aiResponse
        });

        _isTyping = false;
        await InvokeAsync(StateHasChanged);
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            await SendMessage();
        }
    }

    private string GenerateResponse(string userMessage)
    {
        // Simple pattern matching for demo purposes
        var lowerMessage = userMessage.ToLowerInvariant();

        if (lowerMessage.Contains("status") || lowerMessage.Contains("adapter"))
        {
            return "Based on current data, your adapters are functioning normally. You have active connections with good latency. Would you like more specific information about a particular adapter?";
        }
        else if (lowerMessage.Contains("latency") || lowerMessage.Contains("ping"))
        {
            return "Your current latency appears to be within normal ranges (around 12ms on Wi-Fi). High latency can be caused by network congestion, distance to server, or adapter issues. Would you like me to check specific adapters?";
        }
        else if (lowerMessage.Contains("speed") || lowerMessage.Contains("slow"))
        {
            return "Your network speeds are currently optimal. Wi-Fi is showing 85+ Mbps download. If you're experiencing slowness, it might be application-specific or related to the destination server.";
        }
        else if (lowerMessage.Contains("help") || lowerMessage.Contains("how"))
        {
            return "I can help you with:\n• Adapter status and configuration\n• Network performance analysis\n• Troubleshooting connectivity issues\n• Explaining metrics like latency and throughput\n\nWhat would you like to know more about?";
        }
        else
        {
            return "I understand you're asking about network-related topics. Could you be more specific? For example, you could ask about adapter status, connection speed, or latency issues.";
        }
    }

    private class ChatMessage
    {
        public bool IsAi { get; set; }
        public string Content { get; set; } = "";
    }
}