@page "/settings"
@using XNetwork.Services
@using XNetwork.Models
@using XNetwork.Components.Custom
@inject SpeedifyService SpeedifyService
@inject NetworkMonitorService NetworkMonitorService
@inject IConfiguration Configuration

<PageTitle>Settings - X Network</PageTitle>

<div class="p-4 md:p-6">
    <h2 class="text-3xl font-bold text-white mb-1">Settings</h2>
    <p class="text-slate-400 mb-6">Configure application and monitor behavior.</p>

    @if (!string.IsNullOrEmpty(_error))
    {
        <div class="bg-red-500/10 border border-red-500/50 text-red-400 px-4 py-3 rounded-lg relative mb-4" role="alert">
            <strong class="font-bold">Error!</strong>
            <span class="block sm:inline">@_error</span>
        </div>
    }

    @if (_isLoading)
    {
        <Preloader Message="Loading settings..." ContainerClass="py-10" />
    }
    else
    {
        <div class="space-y-6 max-w-2xl">
            <!-- Section 1: Network Monitor -->
            <div class="bg-slate-800/50 border border-slate-700 rounded-xl p-5 shadow-lg">
                <h3 class="text-xl font-semibold text-white mb-4 border-b border-slate-700 pb-3">Network Monitor</h3>
                <div class="space-y-4">
                    <!-- Enable/Disable Toggle -->
                    <ToggleSwitch 
                        Id="monitor-enabled"
                        Label="Enable Background Monitoring"
                        IsEnabled="_monitorSettings.Enabled"
                        OnToggle="HandleMonitorToggle" />

                    <!-- Whitelisted Adapters -->
                    <div>
                        <label for="whitelisted-links" class="block mb-2 font-medium text-white">Whitelisted Adapters</label>
                        <input type="text" 
                               id="whitelisted-links" 
                               @bind="_whitelistedLinksInput" 
                               class="w-full bg-slate-900 border border-slate-700 rounded-md p-2 text-white focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none transition-colors">
                        <p class="text-xs text-slate-400 mt-1">Comma-separated list of adapter IDs to monitor.</p>
                    </div>

                    <!-- Timeout -->
                    <div>
                        <label for="down-timeout" class="block mb-2 font-medium text-white">Restart Timeout (seconds)</label>
                        <input type="number" 
                               id="down-timeout" 
                               @bind="_monitorSettings.DownTimeoutSeconds" 
                               class="w-full bg-slate-900 border border-slate-700 rounded-md p-2 text-white focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none transition-colors">
                        <p class="text-xs text-slate-400 mt-1">Time to wait before restarting a failed adapter.</p>
                    </div>
                </div>
            </div>

            <!-- Section 2: Connection Settings -->
            <div class="bg-slate-800/50 border border-slate-700 rounded-xl p-5 shadow-lg">
                <h3 class="text-xl font-semibold text-white mb-4 border-b border-slate-700 pb-3">Connection Settings</h3>
                <div class="space-y-4">
                    <!-- Encryption Toggle -->
                    <ToggleSwitch
                        Id="encryption-enabled"
                        Label="Enable VPN tunnel encryption"
                        IsEnabled="_connectionSettings.Encrypted"
                        OnToggle="HandleEncryptionToggle" />

                    <!-- Header Compression Toggle -->
                    <ToggleSwitch
                        Id="header-compression"
                        Label="Compress packet headers to reduce bandwidth"
                        IsEnabled="_connectionSettings.HeaderCompression"
                        OnToggle="HandleHeaderCompressionToggle" />

                    <!-- Packet Aggregation Toggle -->
                    <ToggleSwitch
                        Id="packet-aggregation"
                        Label="Combine small packets for better efficiency"
                        IsEnabled="_connectionSettings.PacketAggregation"
                        OnToggle="HandlePacketAggregationToggle" />

                    <!-- Jumbo Packets Toggle -->
                    <ToggleSwitch
                        Id="jumbo-packets"
                        Label="Allow larger MTU packets for better throughput"
                        IsEnabled="_connectionSettings.JumboPackets"
                        OnToggle="HandleJumboPacketsToggle" />
                </div>
            </div>

            <!-- Section 3: Bonding Mode -->
            <div class="bg-slate-800/50 border border-slate-700 rounded-xl p-5 shadow-lg">
                <h3 class="text-xl font-semibold text-white mb-4 border-b border-slate-700 pb-3">Bonding Mode</h3>
                <div class="space-y-4">
                    <div>
                        <label for="bonding-mode" class="block mb-2 font-medium text-white">Connection Mode</label>
                        <select id="bonding-mode"
                                @bind="_selectedBondingMode"
                                @bind:after="HandleBondingModeChange"
                                disabled="@_isProcessing"
                                class="w-full bg-slate-900 border border-slate-700 rounded-md p-2 text-white focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none transition-colors disabled:opacity-50 disabled:cursor-not-allowed">
                            <option value="speed">Speed Mode - Maximum speed using all connections</option>
                            <option value="redundant">Redundant Mode - Maximum reliability with duplicate packets</option>
                            <option value="streaming">Streaming Mode - Optimized for live streaming</option>
                        </select>
                        <p class="text-xs text-slate-400 mt-1">Choose how Speedify uses multiple connections.</p>
                    </div>
                </div>
            </div>

            <!-- Section 4: Bypass Mode -->
            <div class="bg-slate-800/50 border border-slate-700 rounded-xl p-5 shadow-lg">
                <h3 class="text-xl font-semibold text-white mb-4 border-b border-slate-700 pb-3">Bypass Mode</h3>
                <div class="space-y-4">
                    <ToggleSwitch
                        Id="bypass-mode"
                        Label="Direct Network Access (Disconnect Speedify)"
                        IsEnabled="_bypassModeEnabled"
                        OnToggle="HandleBypassModeToggle" />
                    <p class="text-xs text-slate-400 mt-1">When enabled, Speedify disconnects and you use networks directly without VPN.</p>
                    
                    @if (_bypassModeEnabled && OperatingSystem.IsLinux())
                    {
                        <div class="mt-4 pl-4 border-l-2 border-blue-500">
                            <label for="bypass-adapter" class="block mb-2 font-medium text-white">Network Adapter:</label>
                            <select id="bypass-adapter"
                                    @bind="_selectedBypassAdapter"
                                    @bind:after="OnBypassAdapterChanged"
                                    disabled="@_isProcessing"
                                    class="w-full bg-slate-900 border border-slate-700 rounded-md p-2 text-white focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none transition-colors disabled:opacity-50 disabled:cursor-not-allowed">
                                <option value="">Automatic (OS Default)</option>
                                @foreach (var adapter in _adapters)
                                {
                                    <option value="@adapter.AdapterId">@adapter.Name - @adapter.Type</option>
                                }
                            </select>
                            <p class="text-xs text-slate-400 mt-1">Select which adapter to route traffic through when Speedify is disconnected.</p>
                        </div>
                    }
                    else if (_bypassModeEnabled && !OperatingSystem.IsLinux())
                    {
                        <div class="mt-4 pl-4 border-l-2 border-yellow-500">
                            <p class="text-xs text-yellow-400">
                                <i class="fas fa-info-circle mr-1"></i>
                                Network adapter selection is only available on Linux.
                            </p>
                        </div>
                    }
                </div>
            </div>

            <!-- Section 5: Connection Controls -->
            <div class="bg-slate-800/50 border border-slate-700 rounded-xl p-5 shadow-lg">
                <h3 class="text-xl font-semibold text-white mb-4 border-b border-slate-700 pb-3">Connection Controls</h3>
                <div class="space-y-3">
                    <button class="w-full text-left flex items-center gap-3 bg-red-600/20 hover:bg-red-600/30 text-red-400 font-semibold py-3 px-4 rounded-md transition-colors"
                            @onclick="ShowDisconnectModal"
                            disabled="@_isProcessing">
                        <i class="fas fa-unlink w-5 text-center"></i>
                        <span>Disconnect All Connections</span>
                    </button>
                    <button class="w-full text-left flex items-center gap-3 bg-blue-600/20 hover:bg-blue-600/30 text-blue-400 font-semibold py-3 px-4 rounded-md transition-colors"
                            @onclick="ShowReconnectModal"
                            disabled="@_isProcessing">
                        <i class="fas fa-sync w-5 text-center"></i>
                        <span>Reconnect All Connections</span>
                    </button>
                    <button class="w-full text-left flex items-center gap-3 bg-orange-600/20 hover:bg-orange-600/30 text-orange-400 font-semibold py-3 px-4 rounded-md transition-colors"
                            @onclick="ShowRestartModal"
                            disabled="@_isProcessing">
                        <i class="fas fa-power-off w-5 text-center"></i>
                        <span>Restart Speedify Service</span>
                    </button>
                    <button class="w-full text-left flex items-center gap-3 bg-purple-600/20 hover:bg-purple-600/30 text-purple-400 font-semibold py-3 px-4 rounded-md transition-colors"
                            @onclick="ShowRebootModal"
                            disabled="@_isProcessing">
                        <i class="fas fa-server w-5 text-center"></i>
                        <span>Reboot Server</span>
                    </button>
                </div>
            </div>

            <!-- Save Button -->
            <div class="flex justify-end pt-2">
                <button class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2.5 px-6 rounded-md transition-colors shadow-lg"
                        @onclick="SaveSettings"
                        disabled="@_isProcessing">
                    @if (_isProcessing)
                    {
                        <text>Saving...</text>
                    }
                    else
                    {
                        <text>Save Changes</text>
                    }
                </button>
            </div>
        </div>
    }
</div>

<!-- Confirmation Modals -->
<ConfirmationModal
    IsVisible="_showDisconnectModal"
    Title="Disconnect All Connections"
    Message="Are you sure you want to disconnect all connections? This will stop all network adapters."
    ConfirmText="Disconnect"
    CancelText="Cancel"
    ConfirmButtonClass="btn-red"
    OnConfirm="HandleDisconnectConfirm" />

<ConfirmationModal
    IsVisible="_showReconnectModal"
    Title="Reconnect All Connections"
    Message="Are you sure you want to reconnect all connections? This will briefly interrupt connectivity."
    ConfirmText="Reconnect"
    CancelText="Cancel"
    ConfirmButtonClass="btn-blue"
    OnConfirm="HandleReconnectConfirm" />

<ConfirmationModal
    IsVisible="_showRestartModal"
    Title="Restart Speedify Service"
    Message="Are you sure you want to restart the Speedify service? This will briefly interrupt all connections."
    ConfirmText="Restart"
    CancelText="Cancel"
    ConfirmButtonClass="btn-orange"
    OnConfirm="HandleRestartConfirm" />

<ConfirmationModal
    IsVisible="_showRebootModal"
    Title="Reboot Server"
    Message="Are you sure you want to reboot the server? This will disconnect all users and services."
    ConfirmText="Reboot Server"
    CancelText="Cancel"
    ConfirmButtonClass="btn-red"
    OnConfirm="HandleRebootConfirm" />

@code {
    private NetworkMonitorSettings _monitorSettings = new();
    private string _whitelistedLinksInput = "";
    private SpeedifySettings _connectionSettings = new();
    private string? _error;
    private bool _isLoading = true;
    private bool _isProcessing = false;

    // Bonding mode state
    private string _selectedBondingMode = "speed";

    // Bypass mode state
    private bool _bypassModeEnabled = false;
    private string _selectedBypassAdapter = "";
    private List<Adapter> _adapters = new();

    // Modal visibility state
    private bool _showDisconnectModal = false;
    private bool _showReconnectModal = false;
    private bool _showRestartModal = false;
    private bool _showRebootModal = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadSettings();
    }

    private async Task LoadSettings()
    {
        _isLoading = true;
        _error = null;

        try
        {
            // Load network monitor settings from configuration
            var monitorSection = Configuration.GetSection("NetworkMonitor");
            if (monitorSection.Exists())
            {
                _monitorSettings = monitorSection.Get<NetworkMonitorSettings>() ?? new NetworkMonitorSettings();
            }

            // Convert whitelisted links to comma-separated string
            _whitelistedLinksInput = string.Join(", ", _monitorSettings.WhitelistedLinks);

            // Load adapters for bypass mode dropdown
            try
            {
                var adapters = await SpeedifyService.GetAdaptersAsync();
                _adapters = adapters.ToList();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Settings: Error loading adapters: {ex.Message}");
                _adapters = new List<Adapter>();
            }

            // Load connection settings from Speedify
            var speedifySettings = await SpeedifyService.GetSettingsAsync();
            if (speedifySettings != null)
            {
                _connectionSettings = speedifySettings;
                _selectedBondingMode = speedifySettings.BondingMode ?? "speed";
            }

            // Check if Speedify is connected for bypass mode state
            try
            {
                var state = await Task.Run(() =>
                    System.Diagnostics.Process.Start(new System.Diagnostics.ProcessStartInfo
                    {
                        FileName = "speedify_cli",
                        Arguments = "state",
                        RedirectStandardOutput = true,
                        UseShellExecute = false,
                        CreateNoWindow = true
                    })?.StandardOutput.ReadToEnd() ?? "{}")
                    .ConfigureAwait(false);
                
                // Bypass mode is enabled when state is NOT "CONNECTED"
                _bypassModeEnabled = !state.Contains("\"CONNECTED\"");
            }
            catch
            {
                // Default to false if we can't determine state
                _bypassModeEnabled = false;
            }
        }
        catch (Exception ex)
        {
            _error = $"Failed to load settings: {ex.Message}";
            Console.WriteLine($"Settings: Error loading settings: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task HandleMonitorToggle(bool enabled)
    {
        _monitorSettings.Enabled = enabled;
        await InvokeAsync(StateHasChanged);
    }

    private async Task HandleEncryptionToggle(bool enabled)
    {
        _isProcessing = true;
        _error = null;
        await InvokeAsync(StateHasChanged);

        try
        {
            var success = await SpeedifyService.SetEncryptionAsync(enabled);
            if (success)
            {
                _connectionSettings.Encrypted = enabled;
                Console.WriteLine($"Settings: Encryption set to {enabled}");
            }
            else
            {
                _error = "Failed to update encryption setting";
            }
        }
        catch (Exception ex)
        {
            _error = $"Error updating encryption: {ex.Message}";
            Console.WriteLine($"Settings: Error updating encryption: {ex.Message}");
        }
        finally
        {
            _isProcessing = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task HandleHeaderCompressionToggle(bool enabled)
    {
        _isProcessing = true;
        _error = null;
        await InvokeAsync(StateHasChanged);

        try
        {
            var success = await SpeedifyService.SetHeaderCompressionAsync(enabled);
            if (success)
            {
                _connectionSettings.HeaderCompression = enabled;
                Console.WriteLine($"Settings: Header compression set to {enabled}");
            }
            else
            {
                _error = "Failed to update header compression setting";
            }
        }
        catch (Exception ex)
        {
            _error = $"Error updating header compression: {ex.Message}";
            Console.WriteLine($"Settings: Error updating header compression: {ex.Message}");
        }
        finally
        {
            _isProcessing = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task HandlePacketAggregationToggle(bool enabled)
    {
        _isProcessing = true;
        _error = null;
        await InvokeAsync(StateHasChanged);

        try
        {
            var success = await SpeedifyService.SetPacketAggregationAsync(enabled);
            if (success)
            {
                _connectionSettings.PacketAggregation = enabled;
                Console.WriteLine($"Settings: Packet aggregation set to {enabled}");
            }
            else
            {
                _error = "Failed to update packet aggregation setting";
            }
        }
        catch (Exception ex)
        {
            _error = $"Error updating packet aggregation: {ex.Message}";
            Console.WriteLine($"Settings: Error updating packet aggregation: {ex.Message}");
        }
        finally
        {
            _isProcessing = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task HandleJumboPacketsToggle(bool enabled)
    {
        _isProcessing = true;
        _error = null;
        await InvokeAsync(StateHasChanged);

        try
        {
            var success = await SpeedifyService.SetJumboPacketsAsync(enabled);
            if (success)
            {
                _connectionSettings.JumboPackets = enabled;
                Console.WriteLine($"Settings: Jumbo packets set to {enabled}");
            }
            else
            {
                _error = "Failed to update jumbo packets setting";
            }
        }
        catch (Exception ex)
        {
            _error = $"Error updating jumbo packets: {ex.Message}";
            Console.WriteLine($"Settings: Error updating jumbo packets: {ex.Message}");
        }
        finally
        {
            _isProcessing = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task HandleBondingModeChange()
    {
        _isProcessing = true;
        _error = null;
        await InvokeAsync(StateHasChanged);

        try
        {
            var updatedSettings = await SpeedifyService.SetBondingModeAsync(_selectedBondingMode);
            if (updatedSettings != null)
            {
                _connectionSettings.BondingMode = updatedSettings.BondingMode;
                Console.WriteLine($"Settings: Bonding mode set to {_selectedBondingMode}");
            }
            else
            {
                _error = "Failed to update bonding mode";
                // Revert to previous value
                _selectedBondingMode = _connectionSettings.BondingMode ?? "speed";
            }
        }
        catch (Exception ex)
        {
            _error = $"Error updating bonding mode: {ex.Message}";
            Console.WriteLine($"Settings: Error updating bonding mode: {ex.Message}");
            // Revert to previous value
            _selectedBondingMode = _connectionSettings.BondingMode ?? "speed";
        }
        finally
        {
            _isProcessing = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task HandleBypassModeToggle(bool enabled)
    {
        _isProcessing = true;
        _error = null;
        await InvokeAsync(StateHasChanged);

        try
        {
            if (enabled)
            {
                // Bypass mode ON = Disconnect Speedify
                await SpeedifyService.StopAsync();
                _bypassModeEnabled = true;
                Console.WriteLine("Settings: Speedify disconnected (bypass mode enabled)");
            }
            else
            {
                // Bypass mode OFF = Restore default routing and reconnect Speedify
                if (OperatingSystem.IsLinux())
                {
                    await NetworkMonitorService.RestoreDefaultRoutingAsync();
                    Console.WriteLine("Settings: Default routing restored");
                }
                
                _selectedBypassAdapter = "";
                await SpeedifyService.StartAsync();
                _bypassModeEnabled = false;
                Console.WriteLine("Settings: Speedify connected (bypass mode disabled)");
            }
            
            await Task.Delay(1000); // Give time for state to update
        }
        catch (SpeedifyException ex)
        {
            _error = $"Failed to toggle bypass mode: {ex.Message}";
            // Revert state
            _bypassModeEnabled = !enabled;
        }
        catch (Exception ex)
        {
            _error = $"An unexpected error occurred: {ex.Message}";
            // Revert state
            _bypassModeEnabled = !enabled;
        }
        finally
        {
            _isProcessing = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task OnBypassAdapterChanged()
    {
        if (!OperatingSystem.IsLinux())
        {
            return; // Adapter selection only works on Linux
        }

        _isProcessing = true;
        _error = null;
        await InvokeAsync(StateHasChanged);

        try
        {
            if (string.IsNullOrEmpty(_selectedBypassAdapter))
            {
                // Automatic mode - restore default routing
                var success = await NetworkMonitorService.RestoreDefaultRoutingAsync();
                if (success)
                {
                    Console.WriteLine("Settings: Restored automatic routing");
                }
                else
                {
                    _error = "Failed to restore automatic routing";
                }
            }
            else
            {
                // Set specific adapter as primary route
                var success = await NetworkMonitorService.SetPrimaryRouteAsync(_selectedBypassAdapter);
                if (success)
                {
                    Console.WriteLine($"Settings: Set {_selectedBypassAdapter} as primary route");
                }
                else
                {
                    _error = $"Failed to set {_selectedBypassAdapter} as primary route. Check that the adapter is active and has a valid gateway.";
                }
            }
        }
        catch (Exception ex)
        {
            _error = $"Error changing network adapter: {ex.Message}";
            Console.WriteLine($"Settings: Error changing bypass adapter: {ex.Message}");
        }
        finally
        {
            _isProcessing = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task SaveSettings()
    {
        _isProcessing = true;
        _error = null;
        await InvokeAsync(StateHasChanged);

        try
        {
            // Parse whitelisted links from input
            var links = _whitelistedLinksInput
                .Split(',')
                .Select(s => s.Trim())
                .Where(s => !string.IsNullOrEmpty(s))
                .ToList();

            _monitorSettings.WhitelistedLinks = links;

            // TODO: Save settings to configuration file
            // This would require writing to appsettings.json or a separate settings file
            // For now, settings are only saved in memory during the session

            Console.WriteLine($"Settings: Saved - Enabled: {_monitorSettings.Enabled}, Timeout: {_monitorSettings.DownTimeoutSeconds}, Links: {string.Join(", ", _monitorSettings.WhitelistedLinks)}");
            
            // Show success message briefly
            await Task.Delay(500);
        }
        catch (Exception ex)
        {
            _error = $"Failed to save settings: {ex.Message}";
            Console.WriteLine($"Settings: Error saving settings: {ex.Message}");
        }
        finally
        {
            _isProcessing = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    // Modal show methods
    private void ShowDisconnectModal()
    {
        _showDisconnectModal = true;
    }

    private void ShowReconnectModal()
    {
        _showReconnectModal = true;
    }

    private void ShowRestartModal()
    {
        _showRestartModal = true;
    }

    private void ShowRebootModal()
    {
        _showRebootModal = true;
    }

    // Modal confirmation handlers
    private async Task HandleDisconnectConfirm(bool confirmed)
    {
        _showDisconnectModal = false;
        await InvokeAsync(StateHasChanged);

        if (confirmed)
        {
            await DisconnectAll();
        }
    }

    private async Task HandleReconnectConfirm(bool confirmed)
    {
        _showReconnectModal = false;
        await InvokeAsync(StateHasChanged);

        if (confirmed)
        {
            await ReconnectAll();
        }
    }

    private async Task HandleRestartConfirm(bool confirmed)
    {
        _showRestartModal = false;
        await InvokeAsync(StateHasChanged);

        if (confirmed)
        {
            await RestartSpeedify();
        }
    }

    private async Task HandleRebootConfirm(bool confirmed)
    {
        _showRebootModal = false;
        await InvokeAsync(StateHasChanged);

        if (confirmed)
        {
            await RebootServer();
        }
    }

    // Actual action methods
    private async Task DisconnectAll()
    {
        _isProcessing = true;
        _error = null;
        await InvokeAsync(StateHasChanged);

        try
        {
            await SpeedifyService.StopAsync();
            await Task.Delay(1000);
        }
        catch (SpeedifyException ex)
        {
            _error = $"Failed to disconnect: {ex.Message}";
        }
        catch (Exception ex)
        {
            _error = $"An unexpected error occurred: {ex.Message}";
        }
        finally
        {
            _isProcessing = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task ReconnectAll()
    {
        _isProcessing = true;
        _error = null;
        await InvokeAsync(StateHasChanged);

        try
        {
            await SpeedifyService.ReconnectAsync();
            Console.WriteLine("Settings: Reconnection completed.");
            await Task.Delay(1000);
        }
        catch (SpeedifyException ex)
        {
            _error = $"Failed to reconnect: {ex.Message}";
        }
        catch (Exception ex)
        {
            _error = $"An unexpected error occurred: {ex.Message}";
        }
        finally
        {
            _isProcessing = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task RestartSpeedify()
    {
        _isProcessing = true;
        _error = null;
        await InvokeAsync(StateHasChanged);

        try
        {
            Console.WriteLine("Settings: Restarting Speedify service/daemon...");
            
            var startInfo = new System.Diagnostics.ProcessStartInfo();
            
            if (OperatingSystem.IsWindows())
            {
                // Windows: Restart the Speedify service
                startInfo.FileName = "net";
                startInfo.Arguments = "stop \"Speedify Service\" && net start \"Speedify Service\"";
                startInfo.UseShellExecute = false;
                startInfo.CreateNoWindow = true;
                startInfo.RedirectStandardOutput = true;
                startInfo.RedirectStandardError = true;
            }
            else if (OperatingSystem.IsLinux())
            {
                // Linux: Restart Speedify using systemctl or service command with sudo
                // Requires passwordless sudo configuration (see LINUX_SETUP.md)
                startInfo.FileName = "/bin/bash";
                startInfo.Arguments = "-c \"sudo systemctl restart speedify 2>/dev/null || sudo service speedify restart\"";
                startInfo.UseShellExecute = false;
                startInfo.CreateNoWindow = true;
                startInfo.RedirectStandardOutput = true;
                startInfo.RedirectStandardError = true;
            }
            else
            {
                throw new PlatformNotSupportedException("Speedify service restart is only supported on Windows and Linux.");
            }

            using var process = System.Diagnostics.Process.Start(startInfo);
            if (process != null)
            {
                await process.WaitForExitAsync();
                
                var output = await process.StandardOutput.ReadToEndAsync();
                var error = await process.StandardError.ReadToEndAsync();
                
                if (process.ExitCode != 0)
                {
                    // Provide helpful error message with setup instructions
                    var permissionError = error.Contains("Permission denied") ||
                                        error.Contains("Access denied") ||
                                        error.Contains("must be root") ||
                                        error.Contains("not permitted");
                    
                    if (permissionError && OperatingSystem.IsLinux())
                    {
                        throw new Exception(
                            $"Permission denied. Passwordless sudo is not configured correctly.\n\n" +
                            $"To fix this issue:\n\n" +
                            $"1. Verify passwordless sudo configuration:\n" +
                            $"   • Run: sudo -l\n" +
                            $"   • Should show: (ALL) NOPASSWD: /bin/systemctl restart speedify\n" +
                            $"   • See LINUX_SETUP.md for complete setup instructions\n\n" +
                            $"2. If not configured, set up passwordless sudo:\n" +
                            $"   • sudo visudo -f /etc/sudoers.d/xnetwork-web\n" +
                            $"   • Add required NOPASSWD entries (see LINUX_SETUP.md)\n\n" +
                            $"3. Ensure you're running as the configured user\n\n" +
                            $"Exit code: {process.ExitCode}\n" +
                            $"Error details: {error}");
                    }
                    
                    throw new Exception($"Service restart failed with exit code {process.ExitCode}. Error: {error}");
                }
                
                Console.WriteLine($"Settings: Speedify service restart completed. Output: {output}");
            }
            
            // Wait for service to be ready
            await Task.Delay(3000);
        }
        catch (Exception ex)
        {
            _error = $"Failed to restart service: {ex.Message}";
            Console.WriteLine($"Settings: Error restarting Speedify service: {ex.Message}");
        }
        finally
        {
            _isProcessing = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task RebootServer()
    {
        _isProcessing = true;
        _error = null;
        await InvokeAsync(StateHasChanged);

        try
        {
            Console.WriteLine("Settings: Initiating server reboot...");
            
            var startInfo = new System.Diagnostics.ProcessStartInfo();
            
            if (OperatingSystem.IsWindows())
            {
                startInfo.FileName = "shutdown";
                startInfo.Arguments = "/r /t 5"; // Reboot in 5 seconds
            }
            else if (OperatingSystem.IsLinux())
            {
                // Linux: Reboot using sudo
                // Requires passwordless sudo configuration (see LINUX_SETUP.md)
                startInfo.FileName = "/usr/bin/sudo";
                startInfo.Arguments = "/sbin/reboot";
            }
            else
            {
                throw new PlatformNotSupportedException("Server reboot is only supported on Windows and Linux.");
            }
            
            startInfo.RedirectStandardOutput = true;
            startInfo.RedirectStandardError = true;
            startInfo.UseShellExecute = false;
            startInfo.CreateNoWindow = true;

            using var process = System.Diagnostics.Process.Start(startInfo);
            if (process != null)
            {
                await process.WaitForExitAsync();
                
                var output = await process.StandardOutput.ReadToEndAsync();
                var error = await process.StandardError.ReadToEndAsync();
                
                if (process.ExitCode != 0)
                {
                    // Provide helpful error message with setup instructions
                    var permissionError = error.Contains("Permission denied") ||
                                        error.Contains("Access denied") ||
                                        error.Contains("must be root") ||
                                        error.Contains("not permitted");
                    
                    if (permissionError && OperatingSystem.IsLinux())
                    {
                        throw new Exception(
                            $"Permission denied. Passwordless sudo is not configured correctly.\n\n" +
                            $"To fix this issue:\n\n" +
                            $"1. Verify passwordless sudo configuration:\n" +
                            $"   • Run: sudo -l\n" +
                            $"   • Should show: (ALL) NOPASSWD: /sbin/reboot\n" +
                            $"   • See LINUX_SETUP.md for complete setup instructions\n\n" +
                            $"2. If not configured, set up passwordless sudo:\n" +
                            $"   • sudo visudo -f /etc/sudoers.d/xnetwork-web\n" +
                            $"   • Add required NOPASSWD entries (see LINUX_SETUP.md)\n\n" +
                            $"3. Ensure you're running as the configured user\n\n" +
                            $"Exit code: {process.ExitCode}\n" +
                            $"Error details: {error}");
                    }
                    
                    throw new Exception($"Reboot command failed with exit code {process.ExitCode}. Error: {error}");
                }
                
                Console.WriteLine("Settings: Server reboot command executed successfully.");
            }
            
            await Task.Delay(1000);
        }
        catch (Exception ex)
        {
            _error = $"Failed to reboot server: {ex.Message}";
            Console.WriteLine($"Settings: Error rebooting server: {ex.Message}");
        }
        finally
        {
            _isProcessing = false;
            await InvokeAsync(StateHasChanged);
        }
    }
}