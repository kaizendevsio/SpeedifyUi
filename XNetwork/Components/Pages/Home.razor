@page "/"
@using XNetwork.Services
@inject XNetwork.Services.SpeedifyService S

@if (error != null)
{
    <ErrorBanner Message="@(error)" Retry="Load" />
}
else if (adapters == null)
{
    <p class="text-gray-500">Loading…</p>
}
else
{
    <div class="overflow-x-auto">
        <table class="min-w-full bg-white shadow rounded-lg">
            <thead class="bg-gray-50 text-xs uppercase text-gray-600">
                <tr>
                    <th class="px-4 py-2">Name</th>
                    <th class="px-4 py-2">ISP</th>
                    <th class="px-4 py-2">State</th>
                    <th class="px-4 py-2">Priority</th>
                    <th class="px-4 py-2">Actions</th>
                </tr>
            </thead>
            <tbody class="text-sm">
                @foreach (var a in adapters)
                {
                    <tr class="border-t">
                        <td class="px-4 py-2">@a.name</td>
                        <td class="px-4 py-2">@a.isp</td>
                        <td class="px-4 py-2">
                            <span class="px-2 py-1 rounded text-white @(a.state=="connected"?"bg-green-500":"bg-red-500")">@a.state</span>
                        </td>
                        <td class="px-4 py-2">@a.priority</td>
                        <td class="px-4 py-2">
                            @foreach (var p in prios)
                            {
                                <button class="mx-1 px-2 py-1 rounded border text-xs @(a.priority==p?"bg-blue-500 text-white":"")"
                                        @onclick="() => Change(a.adapterID,p)">
                                    @p
                                </button>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <button class="mt-6 px-4 py-2 bg-yellow-500 text-white rounded" @onclick="Restart">Restart Speedify</button>
}

@code {
    List<Adapter>? adapters;
    string? error;
    string[] prios = ["primary", "secondary", "always", "never"];

    protected override async Task OnInitializedAsync() => await Load();
    async Task Load()
    {
        try { adapters = (await S.GetAdaptersAsync()).ToList(); error=null; }
        catch (SpeedifyException ex){ error = ex.Message; }
    }
    async Task Change(string id,string p){ await S.SetPriAsync(id,p); await Load(); }
    async Task Restart()               { await S.RestartAsync(); await Load(); }
}
