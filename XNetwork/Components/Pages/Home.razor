@page "/"
@using XNetwork.Services
@* Assuming these are your custom components - you might need to style them separately *@
@* @using XNetwork.Components.Custom *@ 
@inject XNetwork.Services.SpeedifyService SpeedifyService

<PageTitle>Network Adapters</PageTitle>

<div class="container mx-auto px-4 py-8 font-inter">
    <h1 class="text-3xl font-bold text-gray-800 mb-6">Network Adapters</h1>

    @if (!string.IsNullOrEmpty(error))
    {
        <div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-6" role="alert">
            <p class="font-bold">Error</p>
            <p>@error</p>
            <button @onclick="LoadDataAsync" class="mt-2 px-3 py-1 bg-red-500 text-white text-sm font-semibold rounded hover:bg-red-600">Retry</button>
        </div>
    }
    else if (adapters == null)
    {
        <p class="text-gray-500">Loading adapters...</p>
    }
    else if (!adapters.Any())
    {
        <p class="text-gray-500">No network adapters found.</p>
    }
    else
    {
        <div class="space-y-4 sm:hidden">
            @foreach (var adapter in adapters.OrderBy(a => GetSortOrderForState(a.State)).ThenBy(a => a.Name))
            {
                var currentStats = GetStatsForAdapter(adapter.AdapterId);
                <div class="bg-white shadow-lg rounded-xl p-5 border border-gray-200 hover:shadow-xl transition-shadow duration-300">
                    <div class="flex justify-between items-start mb-2">
                        <h2 class="text-xl font-semibold text-blue-600">
                            @(!string.IsNullOrEmpty(adapter.Isp) ? adapter.Isp : adapter.Name)
                        </h2>
                        <span class="px-3 py-1 text-xs font-semibold rounded-full
                                     @GetStatePillClass(adapter.State)">
                            @adapter.State
                        </span>
                    </div>

                    <div class="text-sm text-gray-600 mb-1">
                        <span class="font-medium">Adapter:</span> @adapter.Name 
                        @if (!string.IsNullOrEmpty(adapter.AdapterId) && adapter.Name != adapter.AdapterId)
                        {
                            <span class="text-gray-500 text-xs">(@adapter.AdapterId)</span>
                        }
                    </div>
                    @if (!string.IsNullOrEmpty(adapter.Type))
                    {
                        <div class="text-sm text-gray-600 mb-3"><span class="font-medium">Type:</span> @adapter.Type</div>
                    }
                    
                    <div class="my-3 p-3 bg-gray-50 rounded-lg">
                        <div class="flex justify-around items-center text-center">
                            <div>
                                <div class="text-xs text-gray-500 uppercase">Download</div>
                                <div class="text-lg font-semibold text-green-600">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 inline-block mr-1" viewBox="0 0 20 20" fill="currentColor">
                                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm-.707-3.707l3.5-3.5a1 1 0 00-1.414-1.414L10 10.586 8.621 9.207a1 1 0 00-1.414 1.414l2.5 2.5a1 1 0 001.414 0z" clip-rule="evenodd" />
                                    </svg>
                                    @(currentStats != null ? Math.Round(currentStats.DownBps / (1000 * 1000), 2) : 0) <span class="text-xs">Mbps</span>
                                </div>
                            </div>
                            <div>
                                <div class="text-xs text-gray-500 uppercase">Upload</div>
                                <div class="text-lg font-semibold text-blue-600">
                                     <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 inline-block mr-1" viewBox="0 0 20 20" fill="currentColor">
                                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm.707-12.293l-3.5 3.5a1 1 0 001.414 1.414L10 9.414l1.379 1.379a1 1 0 001.414-1.414l-2.5-2.5a1 1 0 00-1.414 0z" clip-rule="evenodd" />
                                    </svg>
                                    @(currentStats != null ? Math.Round(currentStats.UpBps / (1000 * 1000), 2) : 0) <span class="text-xs">Mbps</span>
                                </div>
                            </div>
                        </div>
                         @if (currentStats != null)
                        {
                            <div class="text-center mt-2 text-xs text-gray-500">
                                RTT: @currentStats.RttMs ms | Loss: @Math.Round(currentStats.LossPct,1)%
                            </div>
                        }
                    </div>

                    <div class="mt-3">
                        <div class="text-sm mb-1"><span class="font-medium">Priority:</span> <span class="capitalize">@adapter.Priority</span></div>
                        <div class="flex flex-wrap gap-2">
                            @foreach (var p in prios)
                            {
                                <button class="px-3 py-1.5 text-xs font-medium rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-offset-1
                                             @(adapter.Priority == p 
                                                ? "bg-blue-600 text-white hover:bg-blue-700 focus:ring-blue-500" 
                                                : "bg-gray-200 text-gray-700 hover:bg-gray-300 focus:ring-indigo-500")"
                                        @onclick="() => ChangePriority(adapter.AdapterId, p)">
                                    @p.ToUpper()
                                </button>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>

        <div class="hidden sm:block shadow-lg overflow-hidden border-b border-gray-200 rounded-lg">
            <table class="min-w-full bg-white">
                <thead class="bg-gray-700 text-gray-50">
                    <tr>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider">Adapter Name</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider">ISP</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider">State</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider">DL / UL (Mbps)</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider">RTT (ms) / Loss (%)</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider">Priority</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider">Actions</th>
                    </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-200 text-sm">
                    @foreach (var adapter in adapters.OrderBy(a => GetSortOrderForState(a.State)).ThenBy(a => a.Name))
                    {
                        var currentStats = GetStatsForAdapter(adapter.AdapterId);
                        <tr class="hover:bg-gray-50 transition-colors duration-150">
                            <td class="px-6 py-4 whitespace-nowrap font-medium text-gray-900">
                                @adapter.Name
                                @if (!string.IsNullOrEmpty(adapter.Type))
                                {
                                    <div class="text-xs text-gray-500">@adapter.Type</div>
                                }
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-gray-700">@adapter.Isp</td>
                            <td class="px-6 py-4 whitespace-nowrap">
                                <span class="px-3 py-1 text-xs font-semibold rounded-full leading-tight @GetStatePillClass(adapter.State)">
                                    @adapter.State
                                </span>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-gray-700">
                                @if (currentStats != null)
                                {
                                    <span class="text-green-600">@Math.Round(currentStats.DownBps / (1000 * 1000), 2) /</span> 
                                    <span class ="text-blue-600" > @Math.Round(currentStats.UpBps / (1000 * 1000), 2) </span>
                                }
                                else
                                {
                                    <text>N/A</text>
                                }
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-gray-700">
                                @if (currentStats != null)
                                {
                                    <span>@currentStats.RttMs /</span> 
                                    <span> @Math.Round(currentStats.LossPct, 1) % </span>
                                }
                                else
                                {
                                    <text>N/A</text>
                                }
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap capitalize text-gray-700">@adapter.Priority</td>
                            <td class="px-6 py-4 whitespace-nowrap">
                                <div class="flex space-x-1">
                                    @foreach (var p in prios)
                                    {
                                        <button class="px-2.5 py-1.5 text-xs font-medium rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-offset-1
                                                     @(adapter.Priority == p 
                                                        ? "bg-blue-600 text-white hover:bg-blue-700 focus:ring-blue-500" 
                                                        : "bg-gray-200 text-gray-700 hover:bg-gray-300 focus:ring-indigo-500")"
                                                @onclick="() => ChangePriority(adapter.AdapterId, p)">
                                            @p.ToUpper()
                                        </button>
                                    }
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <button class="mt-8 px-6 py-2 bg-yellow-500 text-white font-semibold rounded-lg shadow-md hover:bg-yellow-600 focus:outline-none focus:ring-2 focus:ring-yellow-400 focus:ring-opacity-75 transition-colors duration-150" 
                @onclick="RestartSpeedifyAsync">
            Restart Speedify
        </button>
    }
</div>

@code {
    private IReadOnlyList<Adapter>? adapters;
    private Dictionary<string, Stats> currentAdapterStats = new Dictionary<string, Stats>();
    private string? error;
    private readonly string[] prios = ["automatic", "always", "secondary", "backup", "never"]; 

    private Timer? _autoRefreshTimer;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("AdaptersPage: OnInitializedAsync");
        await LoadDataAsync();
        _autoRefreshTimer = new Timer(async _ => await InvokeAsync(LoadDataAsync), null, TimeSpan.FromSeconds(2), TimeSpan.FromSeconds(2));
    }

    private async Task LoadDataAsync()
    {
        Console.WriteLine("AdaptersPage: LoadDataAsync called");
        try
        {
            var adaptersTask = SpeedifyService.GetAdaptersAsync();
            
            var newStats = new Dictionary<string, Stats>();
            var statsCts = new CancellationTokenSource(TimeSpan.FromSeconds(1.5)); 
            try
            {
                await foreach (var statEntry in SpeedifyService.GetStatsAsync(statsCts.Token))
                {
                    newStats[statEntry.Adapter] = statEntry; 
                }
            }
            catch(OperationCanceledException)
            {
                 Console.WriteLine("AdaptersPage: Stats fetching cancelled due to timeout during LoadDataAsync.");
            }
            catch(Exception ex)
            {
                 Console.WriteLine($"AdaptersPage: Error fetching stats during LoadDataAsync: {ex.Message}");
            }
            finally{
                statsCts.Dispose();
            }

            adapters = await adaptersTask;
            currentAdapterStats = newStats; 
            error = null;
        }
        catch (SpeedifyException ex)
        {
            error = ex.Message;
            Console.WriteLine($"AdaptersPage: SpeedifyException in LoadDataAsync: {ex.Message}");
        }
        catch (Exception ex)
        {
            error = $"An unexpected error occurred: {ex.Message}";
             Console.WriteLine($"AdaptersPage: Generic Exception in LoadDataAsync: {ex.Message}");
        }
        await InvokeAsync(StateHasChanged); 
    }

    private Stats? GetStatsForAdapter(string AdapterId)
    {
        currentAdapterStats.TryGetValue(AdapterId, out var stats);
        return stats;
    }

    private async Task ChangePriority(string AdapterId, string newPriority)
    {
        try
        {
            await SpeedifyService.SetPriorityAsync(AdapterId, newPriority);
            await LoadDataAsync(); 
        }
        catch (SpeedifyException ex)
        {
            error = ex.Message;
        }
    }

    private async Task RestartSpeedifyAsync()
    {
        try
        {
            await SpeedifyService.RestartAsync();
            await Task.Delay(1000); 
            await LoadDataAsync(); 
        }
        catch (SpeedifyException ex)
        {
            error = ex.Message;
        }
    }

    private string GetStatePillClass(string state)
    {
        return state.ToLowerInvariant() switch
        {
            "connected" => "bg-green-100 text-green-700",
            "connecting" => "bg-yellow-100 text-yellow-700",
            "disconnecting" => "bg-orange-100 text-orange-700",
            "disconnected" => "bg-red-100 text-red-700",
            _ => "bg-gray-100 text-gray-700",
        };
    }

    // Helper method to define sort order for adapter states
    private int GetSortOrderForState(string state)
    {
        return state.ToLowerInvariant() switch
        {
            "connected" => 0,
            "connecting" => 1,
            "disconnecting" => 2, // Or another intermediate state
            "disconnected" => 3,
            _ => 4, // Other states last
        };
    }

    public void Dispose()
    {
        _autoRefreshTimer?.Dispose();
        Console.WriteLine("AdaptersPage: Disposed");
    }
}
