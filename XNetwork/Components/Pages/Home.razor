@page "/"
@using XNetwork.Models 
@using XNetwork.Services
@using XNetwork.Components.Custom
@inject SpeedifyService SpeedifyService
@implements IAsyncDisposable 

<PageTitle>Dashboard - X Network</PageTitle>

<div class="p-4 md:p-6">
    <div class="hidden md:block">
        <h2 class="text-3xl font-bold text-white mb-1">Dashboard</h2>
        <p class="text-slate-400 mb-6">Manage and monitor network adapters in real-time.</p>
    </div>

    @if (!string.IsNullOrEmpty(_error) && _adapters == null && !_initialLoadComplete) 
    {
        <div class="bg-red-500/10 border border-red-500/50 text-red-400 p-4 mb-6 rounded-lg" role="alert">
            <p class="font-bold">Error Loading Adapters</p>
            <p>@_error</p>
            <button @onclick="StreamSpeedifyDataAsync" class="mt-2 px-3 py-1 bg-red-600 text-white text-sm font-semibold rounded hover:bg-red-700" disabled="@_isProcessingAction">Retry</button>
        </div>
    }
    else if (_adapters == null && !_initialLoadComplete) 
    {
        <Preloader Message="Loading adapters..." ContainerClass="py-10" />
    }
    else if (_adapters != null && !_adapters.Any())
    {
        <p class="text-slate-400">No network adapters found.</p>
    }
    else if (_adapters != null) 
    {
        <!-- Overall Connection Summary -->
        <ConnectionSummary 
            ConnectionStatus="@GetOverallConnectionStatus()"
            Latency="@GetAverageLatency()"
            Download="@GetTotalDownload()"
            Upload="@GetTotalUpload()" />

        <!-- Adapter List -->
        <div class="space-y-3">
            <h3 class="text-lg font-semibold text-white px-1">Adapters</h3>
            
            @foreach (var adapter in _adapters.OrderBy(a => GetSortOrderForState(a.State)).ThenBy(a => a.Name))
            {
                var currentStats = GetStatsForAdapter(adapter.AdapterId);
                var isOffline = adapter.State.ToLowerInvariant() == "disconnected" || adapter.State.ToLowerInvariant() == "offline";
                
                <div class="bg-slate-800/50 border border-slate-700 rounded-xl px-3 py-3 shadow-lg">
                    <div class="flex items-center gap-3 text-sm">
                        <i class="@GetAdapterIcon(adapter.Type) @GetAdapterIconColor(adapter.State, isOffline) text-lg w-5 text-center"></i>
                        <p class="font-semibold text-white flex-grow min-w-0 truncate">
                            @GetAdapterDisplayName(adapter.AdapterId)
                        </p>
                        
                        @if (!isOffline && currentStats != null)
                        {
                            <div class="ml-auto flex items-center gap-3 sm:gap-4 flex-shrink-0 text-xs">
                                <span class="inline-flex items-center gap-1.5">
                                    <i class="fas fa-arrow-down text-cyan-400"></i> 
                                    @Math.Round(currentStats.ReceiveBps / (1000 * 1000), 1)
                                </span>
                                <span class="hidden sm:inline-flex items-center gap-1.5">
                                    <i class="fas fa-arrow-up text-pink-400"></i> 
                                    @Math.Round(currentStats.SendBps / (1000 * 1000), 1)
                                </span>
                                <span class="inline-flex items-center gap-1.5">
                                    <i class="far fa-clock text-slate-400"></i> 
                                    @currentStats.LatencyMs ms
                                </span>
                            </div>
                        }
                        
                        <span class="text-xs font-medium @GetStatusPillClass(adapter.State) px-2.5 py-1 rounded-full flex-shrink-0 @(isOffline ? "ml-auto" : "")">
                            @adapter.State
                        </span>
                    </div>
                    
                    @if (!isOffline)
                    {
                        <div class="mt-3 flex items-center gap-2">
                            <label for="priority-select-@adapter.AdapterId" class="text-xs text-slate-400">Priority:</label>
                            <select id="priority-select-@adapter.AdapterId" 
                                    class="flex-1 bg-slate-900 border border-slate-700 rounded-md py-1.5 px-2 text-xs text-white focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none transition-colors capitalize"
                                    @onchange="(e) => ChangePriority(adapter.AdapterId, e.Value?.ToString())" 
                                    disabled="@_isProcessingAction">
                                @foreach (var p in _prios)
                                {
                                    <option value="@p" selected="@(adapter.Priority == p)">@p</option>
                                }
                            </select>
                        </div>
                    }
                </div>
            }
        </div>
    }
</div>

@code {
    private IReadOnlyList<Adapter>? _adapters;
    private List<ConnectionItem> _stats = new();
    private Settings? _speedifySettings; 
    private string? _error;
    private CancellationTokenSource? _statsCts;
    private Timer? _autoRefreshTimer;
    private readonly string[] _prios = ["automatic", "always", "secondary", "backup", "never"]; 

    private bool _initialLoadComplete = false; 
    private bool _isProcessingAction = false; 

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Console.WriteLine("Home: OnAfterRenderAsync");
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            _autoRefreshTimer = new Timer(async _ => await InvokeAsync(LoadAdaptersAndSettingsAsync), null, TimeSpan.FromSeconds(3), TimeSpan.FromSeconds(3));
            await InvokeAsync(LoadAdaptersAndSettingsAsync);
            await StreamSpeedifyDataAsync();
        }
    }

    private string GetAdapterDisplayName(string adapterId)
    {
        var adapter = _adapters.FirstOrDefault(a => a.AdapterId == adapterId);
        return adapter != null ? !string.IsNullOrWhiteSpace(adapter.Isp) ? $"{adapter.Isp} ({adapter.Name})" : adapter.Name : adapterId;
    }

    private async Task LoadAdaptersAndSettingsAsync()
    {
        _adapters = await SpeedifyService.GetAdaptersAsync();
        await InvokeAsync(StateHasChanged);
    }
    
    private async Task StreamSpeedifyDataAsync()
    {
        if (_isProcessingAction && _initialLoadComplete) return; 

        Console.WriteLine("Home: StreamDataAsync called");
        _statsCts = new CancellationTokenSource();
        try
        {
            await foreach (var statEntry in SpeedifyService.GetStatsAsync(_statsCts.Token))
            {
                var existingStatIndex = _stats.FindIndex(s => s.AdapterId == statEntry.AdapterId);
                if (existingStatIndex != -1) _stats[existingStatIndex] = statEntry;
                else _stats.Add(statEntry);
                
                await InvokeAsync(StateHasChanged); 
            }
        }
        catch (SpeedifyException ex)
        {
            _error = ex.Message;
            Console.WriteLine($"Home: SpeedifyException: {ex.Message}");
        }
        catch (Exception ex)
        {
            _error = $"An unexpected error occurred: {ex.Message}";
            Console.WriteLine($"Home: Generic Exception: {ex.Message}");
        }
        finally
        {
            if (!_initialLoadComplete) _initialLoadComplete = true; 
        }
    }

    private ConnectionItem? GetStatsForAdapter(string adapterId)
    {
        return _stats.FirstOrDefault(x => x.AdapterId == adapterId);
    }

    private async Task ChangePriority(string adapterId, string? newPriority)
    {
        if (string.IsNullOrEmpty(newPriority) || _isProcessingAction) return;
        _isProcessingAction = true;
        await InvokeAsync(StateHasChanged); 

        try
        {
            Console.WriteLine($"Home: Changing priority for {adapterId} to {newPriority}");
            await SpeedifyService.SetPriorityAsync(adapterId, newPriority);
            await StreamSpeedifyDataAsync(); 
        }
        catch (SpeedifyException ex) { _error = ex.Message; }
        finally
        {
            _isProcessingAction = false;
            await InvokeAsync(StateHasChanged); 
        }
    }

    private string GetAdapterIcon(string type)
    {
        return type.ToLowerInvariant() switch
        {
            "wifi" => "fas fa-wifi",
            "cellular" => "fas fa-signal",
            "wwan" => "fas fa-signal",
            "mobile" => "fas fa-signal",
            "ethernet" => "fas fa-ethernet",
            _ => "fas fa-network-wired"
        };
    }

    private string GetAdapterIconColor(string state, bool isOffline)
    {
        if (isOffline) return "text-red-400";
        
        return state.ToLowerInvariant() switch
        {
            "connected" => "text-green-400",
            "connecting" => "text-yellow-400",
            "disconnecting" => "text-orange-400",
            _ => "text-gray-400"
        };
    }

    private string GetStatusPillClass(string state)
    {
        return state.ToLowerInvariant() switch
        {
            "connected" => "bg-green-500/10 text-green-400",
            "connecting" => "bg-yellow-500/10 text-yellow-400",
            "disconnecting" => "bg-orange-500/10 text-orange-400",
            "disconnected" => "bg-red-500/10 text-red-400",
            _ => "bg-gray-500/10 text-gray-400"
        };
    }

    private int GetSortOrderForState(string state)
    {
        return state.ToLowerInvariant() switch
        {
            "connected" => 0, 
            "connecting" => 1, 
            "disconnecting" => 2, 
            "disconnected" => 3, 
            _ => 4
        };
    }

    private string GetOverallConnectionStatus()
    {
        if (_adapters == null || !_adapters.Any()) return "No Connection";
        
        var connectedCount = _adapters.Count(a => a.State.ToLowerInvariant() == "connected");
        if (connectedCount == 0) return "Disconnected";
        if (connectedCount == _adapters.Count) return "Excellent Connection";
        return "Partial Connection";
    }

    private int GetAverageLatency()
    {
        if (!_stats.Any()) return 0;
        var connectedStats = _stats.Where(s => s.Connected == true).ToList();
        return connectedStats.Any() ? (int)connectedStats.Average(s => s.LatencyMs) : 0;
    }

    private double GetTotalDownload()
    {
        if (!_stats.Any()) return 0;
        return Math.Round(_stats.Where(s => s.Connected == true).Sum(s => s.ReceiveBps) / (1000 * 1000), 1);
    }

    private double GetTotalUpload()
    {
        if (!_stats.Any()) return 0;
        return Math.Round(_stats.Where(s => s.Connected == true).Sum(s => s.SendBps) / (1000 * 1000), 1);
    }

    public async ValueTask DisposeAsync()
    {
        if (_statsCts != null)
        {
            if (!_statsCts.IsCancellationRequested) await _statsCts.CancelAsync();
            _statsCts.Dispose(); 
            _statsCts = null;
        }
        
        if (_autoRefreshTimer != null)
        {
            await _autoRefreshTimer.DisposeAsync();
        }
        
        Console.WriteLine("Home: Disposed");
    }
}
