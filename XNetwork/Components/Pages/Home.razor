@page "/"
@using XNetwork.Models 
@using XNetwork.Services
@using XNetwork.Components.Custom
@inject SpeedifyService SpeedifyService
@implements IAsyncDisposable 

<PageTitle>Dashboard - X Network</PageTitle>

<div class="p-4 md:p-6">
    <div class="hidden md:block">
        <h2 class="text-3xl font-bold text-white mb-1">Dashboard</h2>
        <p class="text-slate-400 mb-6">Manage and monitor network adapters in real-time.</p>
    </div>

    @if (!string.IsNullOrEmpty(_error) && _adapters == null && !_initialLoadComplete) 
    {
        <div class="bg-red-500/10 border border-red-500/50 text-red-400 p-4 mb-6 rounded-lg" role="alert">
            <p class="font-bold">Error Loading Adapters</p>
            <p>@_error</p>
            <button @onclick="StreamSpeedifyDataAsync" class="mt-2 px-3 py-1 bg-red-600 text-white text-sm font-semibold rounded hover:bg-red-700" disabled="@_isProcessingAction">Retry</button>
        </div>
    }
    else if (_adapters == null && !_initialLoadComplete) 
    {
        <Preloader Message="Loading adapters..." ContainerClass="py-10" />
    }
    else if (_adapters != null && !_adapters.Any())
    {
        <p class="text-slate-400">No network adapters found.</p>
    }
    else if (_adapters != null) 
    {
        <!-- Overall Connection Summary -->
        <ConnectionSummary 
            ConnectionStatus="@GetOverallConnectionStatus()"
            Latency="@GetAverageLatency()"
            Download="@GetTotalDownload()"
            Upload="@GetTotalUpload()" />

        <!-- Adapter List -->
        <div class="space-y-3">
            <h3 class="text-lg font-semibold text-white px-1">Adapters</h3>
            
            @foreach (var adapter in GetSortedAdapters())
            {
                var currentStats = GetStatsForAdapter(adapter.AdapterId);
                var isOffline = adapter.State.ToLowerInvariant() == "disconnected" || adapter.State.ToLowerInvariant() == "offline";
                var bgClass = GetAdapterBackgroundClass(adapter, currentStats);
                
                <div class="@bgClass border border-slate-700 rounded-xl px-3 py-3 shadow-lg relative">
                    <!-- Row 1: Header -->
                    <div class="flex items-center justify-between gap-3 text-sm">
                        <div class="flex items-center gap-3 flex-grow min-w-0">
                            <i class="@GetAdapterIcon(adapter.Type) @GetAdapterIconColor(adapter.State, isOffline) text-lg w-5 text-center flex-shrink-0"></i>
                            <p class="font-semibold text-white truncate">
                                @GetAdapterDisplayName(adapter.AdapterId)
                            </p>
                        </div>
                        <div class="flex items-center gap-2 flex-shrink-0">
                            <span class="text-xs font-medium @GetStatusPillClass(adapter.State) px-2.5 py-1 rounded-full">
                                @adapter.State
                            </span>
                            @if (!isOffline)
                            {
                                <div class="relative">
                                    <button class="bg-slate-700 hover:bg-slate-600 text-gray-300 w-8 h-8 rounded-lg flex items-center justify-center transition-colors"
                                            @onclick="() => ToggleMenu(adapter.AdapterId)">
                                        <i class="fas fa-ellipsis-v"></i>
                                    </button>
                                    
                                    @if (_openMenuAdapterId == adapter.AdapterId)
                                    {
                                        <div class="absolute right-0 top-10 bg-slate-800 border border-slate-700 rounded-lg shadow-xl z-50 min-w-[200px]">
                                            <div class="p-3">
                                                <label class="text-xs text-slate-400 mb-2 block">Priority</label>
                                                <select class="w-full bg-slate-900 border border-slate-700 rounded-md py-1.5 px-2 text-xs text-white focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none transition-colors capitalize"
                                                        @onchange="(e) => ChangePriority(adapter.AdapterId, e.Value?.ToString())"
                                                        disabled="@_isProcessingAction">
                                                    @foreach (var p in _prios)
                                                    {
                                                        <option value="@p" selected="@(adapter.Priority == p)">@p</option>
                                                    }
                                                </select>
                                            </div>
                                        </div>
                                    }
                                </div>
                            }
                        </div>
                    </div>
                    
                    <!-- Row 2: Stats -->
                    @if (!isOffline && currentStats != null)
                    {
                        <div class="flex items-center gap-4 mt-3 text-sm">
                            <div class="flex items-center gap-1.5">
                                <i class="fas fa-arrow-down text-cyan-400 text-sm"></i>
                                <span class="text-white font-semibold">@Math.Round(currentStats.ReceiveBps / (1000 * 1000), 1)</span>
                                <span class="text-xs text-slate-400">Mbps</span>
                            </div>
                            <div class="flex items-center gap-1.5">
                                <i class="fas fa-arrow-up text-pink-400 text-sm"></i>
                                <span class="text-white font-semibold">@Math.Round(currentStats.SendBps / (1000 * 1000), 1)</span>
                                <span class="text-xs text-slate-400">Mbps</span>
                            </div>
                            <div class="flex items-center gap-1.5">
                                <i class="far fa-clock text-slate-400 text-sm"></i>
                                <span class="text-white font-semibold">@currentStats.LatencyMs</span>
                                <span class="text-xs text-slate-400">ms</span>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    }
</div>

@code {
    private IReadOnlyList<Adapter>? _adapters;
    private List<ConnectionItem> _stats = new();
    private Settings? _speedifySettings; 
    private string? _error;
    private CancellationTokenSource? _statsCts;
    private Timer? _autoRefreshTimer;
    private readonly string[] _prios = ["automatic", "always", "secondary", "backup", "never"]; 

    private bool _initialLoadComplete = false;
    private bool _isProcessingAction = false;
    private string? _openMenuAdapterId = null;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Console.WriteLine("Home: OnAfterRenderAsync");
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            _autoRefreshTimer = new Timer(async _ => await InvokeAsync(LoadAdaptersAndSettingsAsync), null, TimeSpan.FromSeconds(3), TimeSpan.FromSeconds(3));
            await InvokeAsync(LoadAdaptersAndSettingsAsync);
            await StreamSpeedifyDataAsync();
        }
    }

    private string GetAdapterDisplayName(string adapterId)
    {
        var adapter = _adapters.FirstOrDefault(a => a.AdapterId == adapterId);
        return adapter != null ? !string.IsNullOrWhiteSpace(adapter.Isp) ? $"{adapter.Isp} ({adapter.Name})" : adapter.Name : adapterId;
    }

    private async Task LoadAdaptersAndSettingsAsync()
    {
        _adapters = await SpeedifyService.GetAdaptersAsync();
        await InvokeAsync(StateHasChanged);
    }
    
    private async Task StreamSpeedifyDataAsync()
    {
        if (_isProcessingAction && _initialLoadComplete) return; 

        Console.WriteLine("Home: StreamDataAsync called");
        _statsCts = new CancellationTokenSource();
        try
        {
            await foreach (var statEntry in SpeedifyService.GetStatsAsync(_statsCts.Token))
            {
                var existingStatIndex = _stats.FindIndex(s => s.AdapterId == statEntry.AdapterId);
                if (existingStatIndex != -1) _stats[existingStatIndex] = statEntry;
                else _stats.Add(statEntry);
                
                await InvokeAsync(StateHasChanged); 
            }
        }
        catch (SpeedifyException ex)
        {
            _error = ex.Message;
            Console.WriteLine($"Home: SpeedifyException: {ex.Message}");
        }
        catch (Exception ex)
        {
            _error = $"An unexpected error occurred: {ex.Message}";
            Console.WriteLine($"Home: Generic Exception: {ex.Message}");
        }
        finally
        {
            if (!_initialLoadComplete) _initialLoadComplete = true; 
        }
    }

    private ConnectionItem? GetStatsForAdapter(string adapterId)
    {
        return _stats.FirstOrDefault(x => x.AdapterId == adapterId);
    }

    private async Task ChangePriority(string adapterId, string? newPriority)
    {
        if (string.IsNullOrEmpty(newPriority) || _isProcessingAction) return;
        _isProcessingAction = true;
        await InvokeAsync(StateHasChanged); 

        try
        {
            Console.WriteLine($"Home: Changing priority for {adapterId} to {newPriority}");
            await SpeedifyService.SetPriorityAsync(adapterId, newPriority);
            await StreamSpeedifyDataAsync(); 
        }
        catch (SpeedifyException ex) { _error = ex.Message; }
        finally
        {
            _isProcessingAction = false;
            await InvokeAsync(StateHasChanged); 
        }
    }

    private string GetAdapterIcon(string type)
    {
        return type.ToLowerInvariant() switch
        {
            "wifi" => "fas fa-wifi",
            "cellular" => "fas fa-signal",
            "wwan" => "fas fa-signal",
            "mobile" => "fas fa-signal",
            "ethernet" => "fas fa-ethernet",
            _ => "fas fa-network-wired"
        };
    }

    private string GetAdapterIconColor(string state, bool isOffline)
    {
        if (isOffline) return "text-red-400";
        
        return state.ToLowerInvariant() switch
        {
            "connected" => "text-green-400",
            "connecting" => "text-yellow-400",
            "disconnecting" => "text-orange-400",
            _ => "text-gray-400"
        };
    }

    private string GetStatusPillClass(string state)
    {
        return state.ToLowerInvariant() switch
        {
            "connected" => "bg-green-500/10 text-green-400",
            "connecting" => "bg-yellow-500/10 text-yellow-400",
            "disconnecting" => "bg-orange-500/10 text-orange-400",
            "disconnected" => "bg-red-500/10 text-red-400",
            _ => "bg-gray-500/10 text-gray-400"
        };
    }

    private int GetSortOrderForState(string state)
    {
        return state.ToLowerInvariant() switch
        {
            "connected" => 0, 
            "connecting" => 1, 
            "disconnecting" => 2, 
            "disconnected" => 3, 
            _ => 4
        };
    }

    private void ToggleMenu(string adapterId)
    {
        _openMenuAdapterId = _openMenuAdapterId == adapterId ? null : adapterId;
    }

    private IEnumerable<Adapter> GetSortedAdapters()
    {
        if (_adapters == null) return Enumerable.Empty<Adapter>();
        
        // Filter out pure "disconnected" adapters - only show connected, connecting, standby, offline states
        var visibleAdapters = _adapters.Where(a => a.State.ToLowerInvariant() != "disconnected");
        
        // Sort by state first, then by latency (for connected adapters)
        return visibleAdapters
            .OrderBy(a => GetSortOrderForState(a.State))
            .ThenBy(a => {
                var stats = GetStatsForAdapter(a.AdapterId);
                return stats?.LatencyMs ?? int.MaxValue;
            })
            .ThenBy(a => {
                var stats = GetStatsForAdapter(a.AdapterId);
                return stats != null ? (stats.LossSend + stats.LossReceive) / 2 : double.MaxValue;
            });
    }

    private string GetOverallConnectionStatus()
    {
        if (_adapters == null || !_adapters.Any()) return "No Connection";
        
        var connectedAdapters = _adapters.Where(a => a.State.ToLowerInvariant() == "connected").ToList();
        var connectedCount = connectedAdapters.Count;
        
        if (connectedCount == 0) return "Disconnected";
        
        // Get stats for connected adapters
        var connectedStats = connectedAdapters
            .Select(a => GetStatsForAdapter(a.AdapterId))
            .Where(s => s != null)
            .ToList();
        
        if (!connectedStats.Any()) return "Partial Connection";
        
        // Calculate quality metrics
        var avgLatency = connectedStats.Average(s => s!.LatencyMs);
        var avgPacketLoss = connectedStats.Average(s => (s!.LossSend + s.LossReceive) / 2);
        var totalSpeed = connectedStats.Sum(s => s!.ReceiveBps + s.SendBps) / (1000 * 1000); // Mbps
        
        // More lenient thresholds for better UX
        if (avgLatency < 80 && avgPacketLoss < 2 && totalSpeed > 50)
            return "Excellent Connection";
        else if (avgLatency < 150 && avgPacketLoss < 5 && totalSpeed > 20)
            return "Good Connection";
        else if (avgLatency < 250 && avgPacketLoss < 10 && totalSpeed > 5)
            return "Fair Connection";
        else if (connectedCount < _adapters.Count / 2)
            return "Partial Connection";
        else
            return "Poor Connection";
    }

    private string GetAdapterBackgroundClass(Adapter adapter, ConnectionItem? currentStats)
    {
        // If offline or no stats, use default background
        var isOffline = adapter.State.ToLowerInvariant() == "disconnected" || adapter.State.ToLowerInvariant() == "offline";
        if (isOffline || currentStats == null) return "bg-slate-800/50";
        
        // Calculate quality based on latency and packet loss
        var avgLoss = (currentStats.LossSend + currentStats.LossReceive) / 2.0;
        
        if (currentStats.LatencyMs < 50 && avgLoss < 1)
            return "bg-green-900/20 border-green-900/30";
        else if (currentStats.LatencyMs < 100 && avgLoss < 3)
            return "bg-slate-800/50";
        else if (currentStats.LatencyMs < 200 && avgLoss < 5)
            return "bg-yellow-900/20 border-yellow-900/30";
        else
            return "bg-red-900/20 border-red-900/30";
    }

    private int GetAverageLatency()
    {
        if (!_stats.Any()) return 0;
        var connectedStats = _stats.Where(s => s.Connected == true).ToList();
        return connectedStats.Any() ? (int)connectedStats.Average(s => s.LatencyMs) : 0;
    }

    private double GetTotalDownload()
    {
        if (!_stats.Any()) return 0;
        return Math.Round(_stats.Where(s => s.Connected == true).Sum(s => s.ReceiveBps) / (1000 * 1000), 1);
    }

    private double GetTotalUpload()
    {
        if (!_stats.Any()) return 0;
        return Math.Round(_stats.Where(s => s.Connected == true).Sum(s => s.SendBps) / (1000 * 1000), 1);
    }

    public async ValueTask DisposeAsync()
    {
        if (_statsCts != null)
        {
            if (!_statsCts.IsCancellationRequested) await _statsCts.CancelAsync();
            _statsCts.Dispose(); 
            _statsCts = null;
        }
        
        if (_autoRefreshTimer != null)
        {
            await _autoRefreshTimer.DisposeAsync();
        }
        
        Console.WriteLine("Home: Disposed");
    }
}
