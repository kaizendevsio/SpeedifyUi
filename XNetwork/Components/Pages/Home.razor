@page "/"
@using XNetwork.Models
@using XNetwork.Services
@using XNetwork.Components.Custom
@using XNetwork.Utils
@inject SpeedifyService SpeedifyService
@inject IConnectionHealthService ConnectionHealthService
@implements IAsyncDisposable

<PageTitle>Dashboard - X Network</PageTitle>

<div class="p-4 md:p-6">
    <div class="hidden md:block">
        <h2 class="text-3xl font-bold text-white mb-1">Dashboard</h2>
        <p class="text-slate-400 mb-6">Manage and monitor network adapters in real-time.</p>
    </div>

    @if (!string.IsNullOrEmpty(_error) && _adapters == null && !_initialLoadComplete) 
    {
        <div class="bg-red-500/10 border border-red-500/50 text-red-400 p-4 mb-6 rounded-lg" role="alert">
            <p class="font-bold">Error Loading Adapters</p>
            <p>@_error</p>
            <button @onclick="StreamSpeedifyDataAsync" class="mt-2 px-3 py-1 bg-red-600 text-white text-sm font-semibold rounded hover:bg-red-700" disabled="@_isProcessingAction">Retry</button>
        </div>
    }
    else if (_adapters == null && !_initialLoadComplete) 
    {
        <Preloader Message="Loading adapters..." ContainerClass="py-10" />
    }
    else if (_adapters != null && !_adapters.Any())
    {
        <p class="text-slate-400">No network adapters found.</p>
    }
    else if (_adapters != null)
    {
        <!-- Current Server Information -->
        <div class="bg-slate-800/50 border border-slate-700 rounded-xl shadow-lg mb-6 p-4">
            @if (_serverInfoLoading)
            {
                <div class="flex items-center gap-3">
                    <div class="animate-pulse flex items-center gap-3 flex-grow">
                        <div class="w-10 h-10 bg-slate-700 rounded-full"></div>
                        <div class="flex-grow">
                            <div class="h-5 bg-slate-700 rounded w-1/3 mb-2"></div>
                            <div class="h-4 bg-slate-700 rounded w-1/2"></div>
                        </div>
                    </div>
                </div>
            }
            else if (_serverInfo == null)
            {
                <div class="flex items-center gap-3">
                    <div class="w-10 h-10 bg-slate-700 rounded-full flex items-center justify-center">
                        <i class="fas fa-server text-slate-500 text-lg"></i>
                    </div>
                    <div>
                        <h3 class="text-base font-semibold text-slate-400">Not Connected to Server</h3>
                        <p class="text-sm text-slate-500">Connect to a Speedify server to see details</p>
                    </div>
                </div>
            }
            else
            {
                <div class="flex items-center gap-3">
                    <div class="w-10 h-10 bg-green-500/10 border border-green-500/30 rounded-full flex items-center justify-center flex-shrink-0">
                        <i class="fas fa-server text-green-400 text-lg"></i>
                    </div>
                    <div class="flex-grow min-w-0">
                        <div class="flex items-center gap-2 mb-1">
                            <h3 class="text-base font-semibold text-white truncate">@_serverInfo.FriendlyName</h3>
                            <span class="px-2 py-0.5 text-xs font-medium rounded-full flex-shrink-0 @GetServerBadgeClass()">
                                @GetServerConnectionType()
                            </span>
                        </div>
                        <div class="flex items-center gap-2 text-sm text-slate-400">
                            <i class="fas fa-map-marker-alt text-xs"></i>
                            <span>@_serverInfo.City, @_serverInfo.Country</span>
                        </div>
                    </div>
                    <div class="flex-shrink-0">
                        <div class="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
                    </div>
                </div>
            }
        </div>

        <!-- Overall Connection Summary -->
        <ConnectionSummary
            ConnectionStatus="@GetOverallConnectionStatus()"
            Latency="@GetAverageLatency()"
            Download="@GetTotalDownload()"
            Upload="@GetTotalUpload()"
            IsStable="@IsConnectionStable()" />

        <!-- Adapter List -->
        <div class="space-y-3">
            <div class="flex items-center gap-3 px-1 mb-3">
                <h3 class="text-lg font-semibold text-white">Adapters</h3>
                <span class="px-3 py-1 bg-green-500/10 text-green-400 text-sm font-medium rounded-full">
                    @GetConnectedCount() connected
                </span>
            </div>
            
            @foreach (var adapter in GetSortedAdapters())
            {
                var currentStats = GetStatsForAdapter(adapter.AdapterId);
                var isOffline = adapter.State.ToLowerInvariant() == "disconnected" || adapter.State.ToLowerInvariant() == "offline";
                var isConnecting = adapter.State.ToLowerInvariant() == "connecting";
                var bgClass = GetAdapterBackgroundClass(adapter, currentStats);
                var signalStrength = !isOffline ? GetSignalStrength(adapter, currentStats) : 0;
                var signalColor = !isOffline ? GetSignalColor(adapter.State, signalStrength) : "slate-700";
                
                <div class="@bgClass border border-slate-700 rounded-xl px-3 py-3 shadow-lg relative cursor-pointer hover:bg-slate-700/30 transition-colors"
                     @onclick="() => OnAdapterClick(adapter)">
                    <!-- Row 1: Header -->
                    <div class="flex items-center justify-between gap-3 text-sm">
                    <div class="flex items-center gap-3 flex-grow min-w-0">
                        @if (!isOffline)
                        {
                            <div class="flex items-end gap-0.5 w-10 h-6 flex-shrink-0">
                                @for (int i = 0; i < 4; i++)
                                {
                                    var isActive = isConnecting ? (i < 2) : (i < signalStrength);
                                    var heightClass = i switch
                                    {
                                        0 => "h-2",  // 25% height
                                        1 => "h-3",  // 37.5% height
                                        2 => "h-4",  // 50% height
                                        3 => "h-6",  // 100% height
                                        _ => "h-2"
                                    };
                                    var animationClass = isConnecting && isActive ? "animate-pulse" : "";
                                    var colorClass = isActive ? $"bg-{signalColor}" : "bg-slate-700";
                                    <div class="@heightClass @colorClass @animationClass w-1.5 rounded-sm transition-all"></div>
                                }
                            </div>
                        }
                            else
                            {
                                <i class="fas fa-signal-slash text-red-400 text-lg w-8 text-center flex-shrink-0"></i>
                            }
                            <div class="flex flex-col min-w-0">
                                <span class="text-base font-medium text-white truncate">@GetProviderName(adapter)</span>
                                <span class="text-sm text-slate-400 truncate">@adapter.Name</span>
                            </div>
                        </div>
                        <div class="flex items-center gap-2 flex-shrink-0">
                            <span class="text-xs font-medium @GetStatusPillClass(adapter.State) px-2.5 py-1 rounded-full">
                                @adapter.State
                            </span>
                        </div>
                    </div>
                    
                    <!-- Row 2: Stats -->
                    @if (!isOffline && currentStats != null)
                    {
                        var downloadSpeedMbps = currentStats.ReceiveBps / (1000.0 * 1000.0);
                        var uploadSpeedMbps = currentStats.SendBps / (1000.0 * 1000.0);
                        
                        <div class="flex items-center gap-4 mt-3 text-sm">
                            <div class="flex items-center gap-1.5">
                                <i class="fas fa-arrow-down text-cyan-400 text-sm"></i>
                                <span class="text-white font-semibold">@SpeedFormatter.FormatSpeedValue(downloadSpeedMbps)</span>
                                <span class="text-xs text-slate-400">@SpeedFormatter.GetSpeedUnit(downloadSpeedMbps)</span>
                            </div>
                            <div class="flex items-center gap-1.5">
                                <i class="fas fa-arrow-up text-pink-400 text-sm"></i>
                                <span class="text-white font-semibold">@SpeedFormatter.FormatSpeedValue(uploadSpeedMbps)</span>
                                <span class="text-xs text-slate-400">@SpeedFormatter.GetSpeedUnit(uploadSpeedMbps)</span>
                            </div>
                            <div class="flex items-center gap-1.5">
                                <i class="far fa-clock text-slate-400 text-sm"></i>
                                <span class="text-white font-semibold">@currentStats.LatencyMs</span>
                                <span class="text-xs text-slate-400">ms</span>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    }
</div>

@code {
    private IReadOnlyList<Adapter>? _adapters;
    private List<ConnectionItem> _stats = new();
    private ServerInfo? _serverInfo;
    private string? _error;
    private CancellationTokenSource? _statsCts;
    private Timer? _autoRefreshTimer;
    private Timer? _serverInfoRefreshTimer;
    private readonly string[] _prios = ["automatic", "always", "secondary", "backup", "never"];

    private bool _initialLoadComplete = false;
    private bool _isProcessingAction = false;
    private bool _serverInfoLoading = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Console.WriteLine("Home: OnAfterRenderAsync");
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            _autoRefreshTimer = new Timer(async _ => await InvokeAsync(LoadAdaptersAndSettingsAsync), null, TimeSpan.FromSeconds(3), TimeSpan.FromSeconds(3));
            _serverInfoRefreshTimer = new Timer(async _ => await InvokeAsync(LoadServerInfoAsync), null, TimeSpan.FromSeconds(10), TimeSpan.FromSeconds(10));
            await InvokeAsync(LoadAdaptersAndSettingsAsync);
            await InvokeAsync(LoadServerInfoAsync);
            await StreamSpeedifyDataAsync();
        }
    }

    private string GetAdapterDisplayName(string adapterId)
    {
        var adapter = _adapters.FirstOrDefault(a => a.AdapterId == adapterId);
        return adapter != null ? !string.IsNullOrWhiteSpace(adapter.Isp) ? $"{adapter.Isp} ({adapter.Name})" : adapter.Name : adapterId;
    }

    private async Task LoadAdaptersAndSettingsAsync()
    {
        _adapters = await SpeedifyService.GetAdaptersAsync();
        await InvokeAsync(StateHasChanged);
    }
    
    private async Task LoadServerInfoAsync()
    {
        try
        {
            _serverInfo = await SpeedifyService.GetCurrentServerAsync();
            _serverInfoLoading = false;
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Home: Error loading server info: {ex.Message}");
            _serverInfoLoading = false;
        }
    }
    
    private async Task StreamSpeedifyDataAsync()
    {
        if (_isProcessingAction && _initialLoadComplete) return; 

        Console.WriteLine("Home: StreamDataAsync called");
        _statsCts = new CancellationTokenSource();
        try
        {
            await foreach (var statEntry in SpeedifyService.GetStatsAsync(_statsCts.Token))
            {
                var existingStatIndex = _stats.FindIndex(s => s.AdapterId == statEntry.AdapterId);
                if (existingStatIndex != -1) _stats[existingStatIndex] = statEntry;
                else _stats.Add(statEntry);
                
                await InvokeAsync(StateHasChanged); 
            }
        }
        catch (SpeedifyException ex)
        {
            _error = ex.Message;
            Console.WriteLine($"Home: SpeedifyException: {ex.Message}");
        }
        catch (Exception ex)
        {
            _error = $"An unexpected error occurred: {ex.Message}";
            Console.WriteLine($"Home: Generic Exception: {ex.Message}");
        }
        finally
        {
            if (!_initialLoadComplete) _initialLoadComplete = true; 
        }
    }

    private ConnectionItem? GetStatsForAdapter(string adapterId)
    {
        return _stats.FirstOrDefault(x => x.AdapterId == adapterId);
    }

    private async Task ChangePriority(string adapterId, string? newPriority)
    {
        if (string.IsNullOrEmpty(newPriority) || _isProcessingAction) return;
        _isProcessingAction = true;
        await InvokeAsync(StateHasChanged); 

        try
        {
            Console.WriteLine($"Home: Changing priority for {adapterId} to {newPriority}");
            await SpeedifyService.SetPriorityAsync(adapterId, newPriority);
            await StreamSpeedifyDataAsync(); 
        }
        catch (SpeedifyException ex) { _error = ex.Message; }
        finally
        {
            _isProcessingAction = false;
            await InvokeAsync(StateHasChanged); 
        }
    }

    private string GetProviderName(Adapter adapter)
    {
        // Extract provider name from ISP field or use adapter name
        if (!string.IsNullOrWhiteSpace(adapter.Isp))
        {
            return adapter.Isp;
        }
        
        // If no ISP, return just the connection type as fallback
        return adapter.Type;
    }

    private int GetSignalStrength(Adapter adapter, ConnectionItem? currentStats)
    {
        // Return 0-4 bars based on latency and packet loss
        if (currentStats == null) return 0;
        
        var avgLoss = (currentStats.LossSend + currentStats.LossReceive) / 2.0;
        
        if (currentStats.LatencyMs < 50 && avgLoss < 1) return 4;   // All 4 bars - Excellent
        if (currentStats.LatencyMs < 100 && avgLoss < 3) return 3;  // 3 bars - Good
        if (currentStats.LatencyMs < 200 && avgLoss < 5) return 2;  // 2 bars - Fair
        if (currentStats.LatencyMs < 300 && avgLoss < 10) return 1; // 1 bar - Poor
        return 0; // No bars - Very poor/disconnected
    }

    private string GetSignalColor(string state, int strength)
    {
        // Show yellow for connecting state
        if (state.ToLowerInvariant() == "connecting")
            return "yellow-400";
            
        return strength switch
        {
            4 => "green-400",   // All 4 bars - Excellent
            3 => "cyan-400",    // 3 bars - Good
            2 => "yellow-400",  // 2 bars - Fair
            1 => "orange-400",  // 1 bar - Poor
            _ => "red-400"      // 0 bars - Very poor
        };
    }

    private void OnAdapterClick(Adapter adapter)
    {
        // For now, just log the click - can be expanded later to show details modal
        Console.WriteLine($"Adapter clicked: {adapter.Name}");
        // Future: Open priority modal or navigate to adapter details
    }

    private string GetStatusPillClass(string state)
    {
        return state.ToLowerInvariant() switch
        {
            "connected" => "bg-green-500/10 text-green-400",
            "connecting" => "bg-yellow-500/10 text-yellow-400",
            "disconnecting" => "bg-orange-500/10 text-orange-400",
            "disconnected" => "bg-red-500/10 text-red-400",
            _ => "bg-gray-500/10 text-gray-400"
        };
    }

    private int GetSortOrderForState(string state)
    {
        return state.ToLowerInvariant() switch
        {
            "connected" => 0, 
            "connecting" => 1, 
            "disconnecting" => 2, 
            "disconnected" => 3, 
            _ => 4
        };
    }

    private IEnumerable<Adapter> GetSortedAdapters()
    {
        if (_adapters == null) return Enumerable.Empty<Adapter>();
        
        // Filter out pure "disconnected" adapters - only show connected, connecting, standby, offline states
        var visibleAdapters = _adapters.Where(a => a.State.ToLowerInvariant() != "disconnected");
        
        // Sort by state first, then by latency (for connected adapters)
        return visibleAdapters
            .OrderBy(a => GetSortOrderForState(a.State))
            .ThenBy(a => {
                var stats = GetStatsForAdapter(a.AdapterId);
                return stats?.LatencyMs ?? int.MaxValue;
            })
            .ThenBy(a => {
                var stats = GetStatsForAdapter(a.AdapterId);
                return stats != null ? (stats.LossSend + stats.LossReceive) / 2 : double.MaxValue;
            });
    }

    private string GetOverallConnectionStatus()
    {
        if (_adapters == null || !_adapters.Any()) return "No Connection";
        
        var connectedAdapters = _adapters.Where(a => a.State.ToLowerInvariant() == "connected").ToList();
        var connectedCount = connectedAdapters.Count;
        
        if (connectedCount == 0) return "Disconnected";
        
        // Use health service for rolling average-based status when initialized
        if (ConnectionHealthService.IsInitialized())
        {
            var health = ConnectionHealthService.GetOverallHealth();
            
            // Map ConnectionStatus enum to user-friendly strings
            return health.Status switch
            {
                ConnectionStatus.Excellent => "Excellent Connection",
                ConnectionStatus.Good => "Good Connection",
                ConnectionStatus.Fair => "Fair Connection",
                ConnectionStatus.Poor => "Poor Connection",
                ConnectionStatus.Critical => "Critical Connection",
                ConnectionStatus.Initializing => "Initializing Connection",
                _ => "Unknown Connection"
            };
        }
        
        // Fallback to instant calculation if service not ready
        var connectedStats = connectedAdapters
            .Select(a => GetStatsForAdapter(a.AdapterId))
            .Where(s => s != null)
            .ToList();
        
        if (!connectedStats.Any()) return "Partial Connection";
        
        // Calculate quality metrics
        var avgLatency = connectedStats.Average(s => s!.LatencyMs);
        var avgPacketLoss = connectedStats.Average(s => (s!.LossSend + s.LossReceive) / 2);
        var totalSpeed = connectedStats.Sum(s => s!.ReceiveBps + s.SendBps) / (1000 * 1000); // Mbps
        
        // Speedify-optimized thresholds (bonded connection adds latency overhead)
        if (avgLatency < 100 && avgPacketLoss < 2 && totalSpeed > 50)
            return "Excellent Connection";
        else if (avgLatency < 180 && avgPacketLoss < 5 && totalSpeed > 20)
            return "Good Connection";
        else if (avgLatency < 300 && avgPacketLoss < 10 && totalSpeed > 5)
            return "Fair Connection";
        else if (connectedCount < _adapters.Count / 2)
            return "Partial Connection";
        else
            return "Poor Connection";
    }

    private string GetAdapterBackgroundClass(Adapter adapter, ConnectionItem? currentStats)
    {
        // If offline or no stats, use default background
        var isOffline = adapter.State.ToLowerInvariant() == "disconnected" || adapter.State.ToLowerInvariant() == "offline";
        if (isOffline || currentStats == null) return "bg-slate-800/50";
        
        // Calculate quality based on latency and packet loss
        var avgLoss = (currentStats.LossSend + currentStats.LossReceive) / 2.0;
        
        if (currentStats.LatencyMs < 50 && avgLoss < 1)
            return "bg-green-900/20 border-green-900/30";
        else if (currentStats.LatencyMs < 100 && avgLoss < 3)
            return "bg-slate-800/50";
        else if (currentStats.LatencyMs < 200 && avgLoss < 5)
            return "bg-yellow-900/20 border-yellow-900/30";
        else
            return "bg-red-900/20 border-red-900/30";
    }

    private int GetAverageLatency()
    {
        // Use health service for rolling average if initialized
        if (ConnectionHealthService.IsInitialized())
        {
            var health = ConnectionHealthService.GetOverallHealth();
            return (int)Math.Round(health.AverageLatency);
        }
        
        // Fallback to instant calculation if service not ready
        if (!_stats.Any()) return 0;
        var connectedStats = _stats.Where(s => s.Connected == true).ToList();
        return connectedStats.Any() ? (int)connectedStats.Average(s => s.LatencyMs) : 0;
    }

    private bool IsConnectionStable()
    {
        // Use health service for stability score if initialized
        if (ConnectionHealthService.IsInitialized())
        {
            var health = ConnectionHealthService.GetOverallHealth();
            // Consider connection stable if stability score > 0.7 (70%)
            return health.StabilityScore > 0.7;
        }
        
        // Default to stable if not enough data
        return true;
    }

    private double GetTotalDownload()
    {
        if (!_stats.Any()) return 0;
        return Math.Round(_stats.Where(s => s.Connected == true).Sum(s => s.ReceiveBps) / (1000 * 1000), 1);
    }

    private double GetTotalUpload()
    {
        if (!_stats.Any()) return 0;
        return Math.Round(_stats.Where(s => s.Connected == true).Sum(s => s.SendBps) / (1000 * 1000), 1);
    }

    private int GetConnectedCount()
    {
        if (_adapters == null || !_adapters.Any())
            return 0;
        
        var sortedAdapters = GetSortedAdapters();
        return sortedAdapters.Count(a =>
            a.State.Equals("connected", StringComparison.OrdinalIgnoreCase));
    }

    private int GetTotalCount()
    {
        if (_adapters == null || !_adapters.Any())
            return 0;
        
        var sortedAdapters = GetSortedAdapters();
        return sortedAdapters.Count();
    }

    private string GetServerConnectionType()
    {
        if (_serverInfo == null) return "";
        
        if (_serverInfo.IsPrivate) return "Private";
        if (_serverInfo.IsPremium) return "Premium";
        return "Public";
    }
    
    private string GetServerTypeColor()
    {
        if (_serverInfo == null) return "slate-400";
        
        if (_serverInfo.IsPrivate) return "purple-400";
        if (_serverInfo.IsPremium) return "yellow-400";
        return "cyan-400";
    }
    
    private string GetServerBadgeClass()
    {
        if (_serverInfo == null) return "bg-slate-700 text-slate-300";
        
        if (_serverInfo.IsPrivate) return "bg-purple-500/20 text-purple-300 border border-purple-500/30";
        if (_serverInfo.IsPremium) return "bg-yellow-500/20 text-yellow-300 border border-yellow-500/30";
        return "bg-cyan-500/20 text-cyan-300 border border-cyan-500/30";
    }

    public async ValueTask DisposeAsync()
    {
        if (_statsCts != null)
        {
            if (!_statsCts.IsCancellationRequested) await _statsCts.CancelAsync();
            _statsCts.Dispose();
            _statsCts = null;
        }
        
        if (_autoRefreshTimer != null)
        {
            await _autoRefreshTimer.DisposeAsync();
        }
        
        if (_serverInfoRefreshTimer != null)
        {
            await _serverInfoRefreshTimer.DisposeAsync();
        }
        
        Console.WriteLine("Home: Disposed");
    }
}
