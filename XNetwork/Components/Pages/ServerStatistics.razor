@page "/server-statistics"
@using XNetwork.Models
@using XNetwork.Services
@using XNetwork.Components.Custom
@using XNetwork.Utils
@inject SpeedifyService SpeedifyService
@implements IAsyncDisposable

<PageTitle>Server Statistics - X Network</PageTitle>

<div class="p-4 md:p-6">
    <div class="hidden md:block">
        <h2 class="text-3xl font-bold text-white mb-1">Server Statistics</h2>
        <p class="text-slate-400 mb-6">Test and monitor server performance metrics.</p>
    </div>

    @if (!string.IsNullOrEmpty(_errorMessage))
    {
        <div class="bg-red-500/10 border border-red-500/50 text-red-400 p-4 mb-6 rounded-lg" role="alert">
            <p class="font-bold">Error</p>
            <p>@_errorMessage</p>
        </div>
    }

    <!-- Current Server Information -->
    <div class="bg-slate-800/50 border border-slate-700 rounded-xl shadow-lg mb-6 p-4">
        @if (_serverInfoLoading)
        {
            <div class="flex items-center gap-3">
                <div class="animate-pulse flex items-center gap-3 flex-grow">
                    <div class="w-10 h-10 bg-slate-700 rounded-full"></div>
                    <div class="flex-grow">
                        <div class="h-5 bg-slate-700 rounded w-1/3 mb-2"></div>
                        <div class="h-4 bg-slate-700 rounded w-1/2"></div>
                    </div>
                </div>
            </div>
        }
        else if (_serverInfo == null)
        {
            <div class="flex items-center gap-3">
                <div class="w-10 h-10 bg-slate-700 rounded-full flex items-center justify-center">
                    <i class="fas fa-server text-slate-500 text-lg"></i>
                </div>
                <div>
                    <h3 class="text-base font-semibold text-slate-400">Not Connected to Server</h3>
                    <p class="text-sm text-slate-500">Connect to a Speedify server to run tests</p>
                </div>
            </div>
        }
        else
        {
            <div class="flex items-center justify-between">
                <div class="flex items-center gap-3 flex-grow">
                    <div class="w-10 h-10 bg-green-500/10 border border-green-500/30 rounded-full flex items-center justify-center flex-shrink-0">
                        <i class="fas fa-server text-green-400 text-lg"></i>
                    </div>
                    <div class="flex-grow min-w-0">
                        <div class="flex items-center gap-2 mb-1">
                            <h3 class="text-base font-semibold text-white truncate">@_serverInfo.FriendlyName</h3>
                            <span class="px-2 py-0.5 text-xs font-medium rounded-full flex-shrink-0"
                                  style="background-color: rgba(@GetServerTypeColorRgb(), 0.1); color: @GetServerTypeColor();">
                                @GetServerConnectionType()
                            </span>
                        </div>
                        <div class="flex items-center gap-2 text-sm text-slate-400">
                            <i class="fas fa-map-marker-alt text-xs"></i>
                            <span>@_serverInfo.City, @_serverInfo.Country</span>
                        </div>
                    </div>
                    <div class="flex-shrink-0">
                        <div class="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
                    </div>
                </div>
            </div>
        }
    </div>

    <!-- Speed Test Section -->
    <div class="mb-6">
        <h3 class="text-xl font-semibold text-white mb-4">Run Performance Tests</h3>
        <p class="text-sm text-slate-400 mb-4">Tests may take 10-30 seconds to complete. Please wait for results.</p>
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
            <!-- Speed Test Button -->
            <button 
                @onclick="RunSpeedTest"
                disabled="@(_isRunningTest || _serverInfo == null)"
                class="@GetTestButtonClass(_isRunningSpeedTest) group">
                <div class="flex items-center justify-center gap-3">
                    @if (_isRunningSpeedTest)
                    {
                        <div class="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                        <span>Running Speed Test...</span>
                    }
                    else
                    {
                        <i class="fas fa-tachometer-alt text-xl group-hover:scale-110 transition-transform"></i>
                        <span>Run Speed Test</span>
                    }
                </div>
                <p class="text-sm opacity-75 mt-2">Test download & upload speeds</p>
            </button>

            <!-- Stream Test Button -->
            <button 
                @onclick="RunStreamTest"
                disabled="@(_isRunningTest || _serverInfo == null)"
                class="@GetTestButtonClass(_isRunningStreamTest) group">
                <div class="flex items-center justify-center gap-3">
                    @if (_isRunningStreamTest)
                    {
                        <div class="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                        <span>Running Stream Test...</span>
                    }
                    else
                    {
                        <i class="fas fa-video text-xl group-hover:scale-110 transition-transform"></i>
                        <span>Run Stream Test</span>
                    }
                </div>
                <p class="text-sm opacity-75 mt-2">Test streaming performance</p>
            </button>
        </div>

        <!-- Latest Test Results -->
        @if (_latestTestResult != null)
        {
            <div class="bg-slate-800/50 border border-slate-700 rounded-xl p-4">
                <div class="flex items-center justify-between mb-4">
                    <h4 class="text-lg font-semibold text-white">Latest Test Result</h4>
                    <span class="px-3 py-1 text-xs font-medium rounded-full @GetTestTypeBadgeClass(_latestTestResult.Type)">
                        @(_latestTestResult.IsSpeedTest ? "Speed Test" : "Stream Test")
                    </span>
                </div>

                <div class="grid grid-cols-2 md:grid-cols-4 gap-4">
                    <!-- Download Speed -->
                    <div class="bg-slate-900/50 rounded-lg p-3">
                        <div class="flex items-center gap-2 mb-1">
                            <i class="fas fa-arrow-down text-cyan-400 text-sm"></i>
                            <span class="text-xs text-slate-400">Download</span>
                        </div>
                        <div class="flex items-baseline gap-1">
                            <span class="text-xl font-bold @GetSpeedColorClass(_latestTestResult.DownloadSpeed)">
                                @FormatSpeed(_latestTestResult.DownloadSpeed)
                            </span>
                        </div>
                    </div>

                    <!-- Upload Speed -->
                    <div class="bg-slate-900/50 rounded-lg p-3">
                        <div class="flex items-center gap-2 mb-1">
                            <i class="fas fa-arrow-up text-pink-400 text-sm"></i>
                            <span class="text-xs text-slate-400">Upload</span>
                        </div>
                        <div class="flex items-baseline gap-1">
                            <span class="text-xl font-bold @GetSpeedColorClass(_latestTestResult.UploadSpeed)">
                                @FormatSpeed(_latestTestResult.UploadSpeed)
                            </span>
                        </div>
                    </div>

                    <!-- Latency -->
                    <div class="bg-slate-900/50 rounded-lg p-3">
                        <div class="flex items-center gap-2 mb-1">
                            <i class="far fa-clock text-slate-400 text-sm"></i>
                            <span class="text-xs text-slate-400">Latency</span>
                        </div>
                        <div class="flex items-baseline gap-1">
                            <span class="text-xl font-bold @GetLatencyColorClass(_latestTestResult.Latency)">
                                @_latestTestResult.Latency
                            </span>
                            <span class="text-xs text-slate-400">ms</span>
                        </div>
                    </div>

                    <!-- Additional Stream Test Metrics -->
                    @if (_latestTestResult.IsStreamTest)
                    {
                        <div class="bg-slate-900/50 rounded-lg p-3">
                            <div class="flex items-center gap-2 mb-1">
                                <i class="fas fa-chart-line text-slate-400 text-sm"></i>
                                <span class="text-xs text-slate-400">Quality</span>
                            </div>
                            <div class="flex flex-col gap-0.5">
                                <span class="text-sm font-bold text-white">@_latestTestResult.Resolution</span>
                                <span class="text-xs text-slate-400">@_latestTestResult.Fps FPS</span>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="bg-slate-900/50 rounded-lg p-3">
                            <div class="flex items-center gap-2 mb-1">
                                <i class="fas fa-link text-slate-400 text-sm"></i>
                                <span class="text-xs text-slate-400">Connections</span>
                            </div>
                            <div class="flex items-baseline gap-1">
                                <span class="text-xl font-bold text-white">
                                    @_latestTestResult.NumConnections
                                </span>
                            </div>
                        </div>
                    }
                </div>

                @if (_latestTestResult.IsStreamTest)
                {
                    <div class="grid grid-cols-2 gap-4 mt-4">
                        <div class="bg-slate-900/50 rounded-lg p-3">
                            <div class="flex items-center gap-2 mb-1">
                                <i class="fas fa-signal text-slate-400 text-sm"></i>
                                <span class="text-xs text-slate-400">Jitter</span>
                            </div>
                            <div class="flex items-baseline gap-1">
                                <span class="text-lg font-bold text-white">@_latestTestResult.Jitter</span>
                                <span class="text-xs text-slate-400">ms</span>
                            </div>
                        </div>
                        <div class="bg-slate-900/50 rounded-lg p-3">
                            <div class="flex items-center gap-2 mb-1">
                                <i class="fas fa-exclamation-triangle text-slate-400 text-sm"></i>
                                <span class="text-xs text-slate-400">Packet Loss</span>
                            </div>
                            <div class="flex items-baseline gap-1">
                                <span class="text-lg font-bold @GetLossColorClass(_latestTestResult.Loss ?? 0)">
                                    @(_latestTestResult.Loss?.ToString("F2") ?? "0.00")
                                </span>
                                <span class="text-xs text-slate-400">%</span>
                            </div>
                        </div>
                    </div>
                }

                <div class="mt-3 pt-3 border-t border-slate-700">
                    <span class="text-xs text-slate-500">
                        <i class="far fa-clock mr-1"></i>
                        @GetRelativeTime(_latestTestResult.Timestamp)
                    </span>
                </div>
            </div>
        }
    </div>

    <!-- Test History Section -->
    <div>
        <div class="flex items-center justify-between mb-4">
            <h3 class="text-xl font-semibold text-white">Test History</h3>
            @if (_testHistory != null && _testHistory.Any())
            {
                <span class="text-sm text-slate-400">@_testHistory.Count test(s)</span>
            }
        </div>

        @if (_historyLoading)
        {
            <Preloader Message="Loading test history..." ContainerClass="py-10" />
        }
        else if (_testHistory == null || !_testHistory.Any())
        {
            <div class="bg-slate-800/50 border border-slate-700 rounded-xl p-8 text-center">
                <i class="fas fa-chart-bar text-slate-600 text-4xl mb-3"></i>
                <p class="text-slate-400">No test history available.</p>
                <p class="text-sm text-slate-500 mt-1">Run a speed or stream test to see results here.</p>
            </div>
        }
        else
        {
            <div class="bg-slate-800/50 border border-slate-700 rounded-xl overflow-hidden">
                <div class="overflow-x-auto">
                    <table class="w-full">
                        <thead class="bg-slate-900/50 border-b border-slate-700">
                            <tr>
                                <th class="px-4 py-3 text-left text-xs font-semibold text-slate-400 uppercase tracking-wider">Time</th>
                                <th class="px-4 py-3 text-left text-xs font-semibold text-slate-400 uppercase tracking-wider">Type</th>
                                <th class="px-4 py-3 text-left text-xs font-semibold text-slate-400 uppercase tracking-wider">Server</th>
                                <th class="px-4 py-3 text-right text-xs font-semibold text-slate-400 uppercase tracking-wider">Download</th>
                                <th class="px-4 py-3 text-right text-xs font-semibold text-slate-400 uppercase tracking-wider">Upload</th>
                                <th class="px-4 py-3 text-right text-xs font-semibold text-slate-400 uppercase tracking-wider">Latency</th>
                            </tr>
                        </thead>
                        <tbody class="divide-y divide-slate-700">
                            @foreach (var test in _testHistory.Take(10))
                            {
                                <tr class="hover:bg-slate-700/30 transition-colors">
                                    <td class="px-4 py-3 text-sm text-slate-300 whitespace-nowrap">
                                        @test.Timestamp.ToString("MMM dd, HH:mm")
                                    </td>
                                    <td class="px-4 py-3">
                                        <span class="px-2 py-1 text-xs font-medium rounded-full @GetTestTypeBadgeClass(test.Type)">
                                            @(test.IsSpeedTest ? "Speed" : "Stream")
                                        </span>
                                    </td>
                                    <td class="px-4 py-3 text-sm text-slate-300">
                                        @test.City, @test.Country.ToUpper()
                                    </td>
                                    <td class="px-4 py-3 text-sm text-right font-medium @GetSpeedColorClass(test.DownloadSpeed)">
                                        @FormatSpeed(test.DownloadSpeed)
                                    </td>
                                    <td class="px-4 py-3 text-sm text-right font-medium @GetSpeedColorClass(test.UploadSpeed)">
                                        @FormatSpeed(test.UploadSpeed)
                                    </td>
                                    <td class="px-4 py-3 text-sm text-right font-medium @GetLatencyColorClass(test.Latency)">
                                        @test.Latency ms
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private ServerInfo? _serverInfo;
    private SpeedTestResult? _latestTestResult;
    private List<SpeedTestResult>? _testHistory;
    
    private bool _serverInfoLoading = true;
    private bool _historyLoading = false;
    private bool _isRunningTest = false;
    private bool _isRunningSpeedTest = false;
    private bool _isRunningStreamTest = false;
    private string? _errorMessage;
    
    private Timer? _serverInfoRefreshTimer;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _serverInfoRefreshTimer = new Timer(async _ => await InvokeAsync(LoadServerInfoAsync), null, TimeSpan.FromSeconds(10), TimeSpan.FromSeconds(10));
            await InvokeAsync(LoadServerInfoAsync);
            await InvokeAsync(LoadTestHistoryAsync);
        }
    }

    private async Task LoadServerInfoAsync()
    {
        try
        {
            _serverInfo = await SpeedifyService.GetCurrentServerAsync();
            _serverInfoLoading = false;
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"ServerStatistics: Error loading server info: {ex.Message}");
            _serverInfoLoading = false;
        }
    }

    private async Task LoadTestHistoryAsync()
    {
        _historyLoading = true;
        await InvokeAsync(StateHasChanged);
        
        try
        {
            _testHistory = await SpeedifyService.GetSpeedTestHistoryAsync();
            if (_testHistory != null && _testHistory.Any() && _latestTestResult == null)
            {
                _latestTestResult = _testHistory.OrderByDescending(t => t.Time).FirstOrDefault();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"ServerStatistics: Error loading test history: {ex.Message}");
        }
        finally
        {
            _historyLoading = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task RunSpeedTest()
    {
        if (_isRunningTest || _serverInfo == null) return;

        _isRunningTest = true;
        _isRunningSpeedTest = true;
        _errorMessage = null;
        await InvokeAsync(StateHasChanged);

        try
        {
            var result = await SpeedifyService.RunSpeedTestAsync();
            if (result != null && !result.IsError)
            {
                _latestTestResult = result;
                await LoadTestHistoryAsync();
            }
            else
            {
                _errorMessage = "Speed test failed or returned an error.";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error running speed test: {ex.Message}";
            Console.WriteLine($"ServerStatistics: {_errorMessage}");
        }
        finally
        {
            _isRunningTest = false;
            _isRunningSpeedTest = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task RunStreamTest()
    {
        if (_isRunningTest || _serverInfo == null) return;

        _isRunningTest = true;
        _isRunningStreamTest = true;
        _errorMessage = null;
        await InvokeAsync(StateHasChanged);

        try
        {
            var result = await SpeedifyService.RunStreamTestAsync();
            if (result != null && !result.IsError)
            {
                _latestTestResult = result;
                await LoadTestHistoryAsync();
            }
            else
            {
                _errorMessage = "Stream test failed or returned an error.";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error running stream test: {ex.Message}";
            Console.WriteLine($"ServerStatistics: {_errorMessage}");
        }
        finally
        {
            _isRunningTest = false;
            _isRunningStreamTest = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private string GetTestButtonClass(bool isRunning)
    {
        if (_serverInfo == null)
            return "bg-slate-700 text-slate-400 cursor-not-allowed px-6 py-4 rounded-xl border border-slate-600";
        
        if (isRunning)
            return "bg-blue-600/50 text-white cursor-wait px-6 py-4 rounded-xl border border-blue-500/50";
        
        return "bg-blue-600 hover:bg-blue-700 text-white px-6 py-4 rounded-xl border border-blue-500 transition-all hover:shadow-lg hover:shadow-blue-500/20 disabled:bg-slate-700 disabled:text-slate-400 disabled:cursor-not-allowed disabled:border-slate-600";
    }

    private string GetServerConnectionType()
    {
        if (_serverInfo == null) return "";
        if (_serverInfo.IsPrivate) return "Private";
        if (_serverInfo.IsPremium) return "Premium";
        return "Public";
    }
    
    private string GetServerTypeColor()
    {
        if (_serverInfo == null) return "#94a3b8";
        if (_serverInfo.IsPrivate) return "#c084fc";
        if (_serverInfo.IsPremium) return "#fbbf24";
        return "#22d3ee";
    }

    private string GetServerTypeColorRgb()
    {
        if (_serverInfo == null) return "148, 163, 184";
        if (_serverInfo.IsPrivate) return "192, 132, 252";
        if (_serverInfo.IsPremium) return "251, 191, 36";
        return "34, 211, 238";
    }

    private string FormatSpeed(double bytesPerSecond)
    {
        var mbps = bytesPerSecond / (1000.0 * 1000.0);
        return SpeedFormatter.FormatSpeed(mbps);
    }

    private string GetSpeedColorClass(double bytesPerSecond)
    {
        var mbps = bytesPerSecond / (1000.0 * 1000.0);
        if (mbps >= 100) return "text-green-400";
        if (mbps >= 50) return "text-cyan-400";
        if (mbps >= 10) return "text-yellow-400";
        return "text-orange-400";
    }

    private string GetLatencyColorClass(int latency)
    {
        if (latency < 50) return "text-green-400";
        if (latency < 100) return "text-cyan-400";
        if (latency < 200) return "text-yellow-400";
        return "text-orange-400";
    }

    private string GetLossColorClass(double loss)
    {
        if (loss < 1) return "text-green-400";
        if (loss < 3) return "text-yellow-400";
        return "text-red-400";
    }

    private string GetTestTypeBadgeClass(string type)
    {
        return type == "speed" 
            ? "bg-blue-500/10 text-blue-400" 
            : "bg-purple-500/10 text-purple-400";
    }

    private string GetRelativeTime(DateTime timestamp)
    {
        var diff = DateTime.Now - timestamp;
        
        if (diff.TotalMinutes < 1)
            return "Just now";
        if (diff.TotalMinutes < 60)
            return $"{(int)diff.TotalMinutes} minute{((int)diff.TotalMinutes != 1 ? "s" : "")} ago";
        if (diff.TotalHours < 24)
            return $"{(int)diff.TotalHours} hour{((int)diff.TotalHours != 1 ? "s" : "")} ago";
        if (diff.TotalDays < 7)
            return $"{(int)diff.TotalDays} day{((int)diff.TotalDays != 1 ? "s" : "")} ago";
        
        return timestamp.ToString("MMM dd, yyyy");
    }

    public async ValueTask DisposeAsync()
    {
        if (_serverInfoRefreshTimer != null)
        {
            await _serverInfoRefreshTimer.DisposeAsync();
        }
    }
}