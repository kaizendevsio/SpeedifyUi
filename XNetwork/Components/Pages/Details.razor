@page "/details"
@using XNetwork.Models
@using XNetwork.Services
@using XNetwork.Components.Custom
@inject IConnectionHealthService ConnectionHealthService
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<PageTitle>Connection Details - X Network</PageTitle>

<div class="p-4 md:p-6">
    <div class="hidden md:block">
        <h2 class="text-3xl font-bold text-white mb-1">Connection Details</h2>
        <p class="text-slate-400 mb-6">Monitor connection health and uptime in real-time.</p>
    </div>

    @if (!ConnectionHealthService.IsInitialized())
    {
        <div class="bg-blue-500/10 border border-blue-500/50 text-blue-400 px-4 py-3 rounded-lg mb-6">
            <strong class="font-bold">Initializing...</strong>
            <span class="block sm:inline">Connection health monitoring is starting up, please wait.</span>
        </div>
        <Preloader Message="Initializing health monitoring..." ContainerClass="py-10" />
    }
    else
    {
        <!-- Overall Connection Health Card -->
        <div class="bg-slate-800/50 border border-slate-700 rounded-xl shadow-lg mb-6 p-6">
            <div class="flex items-center justify-between mb-4">
                <h3 class="text-xl font-semibold text-white">Connection Health</h3>
                <span class="px-3 py-1 text-sm font-medium rounded-full @GetStatusBadgeClass(_overallHealth.Status)">
                    @GetStatusText(_overallHealth.Status)
                </span>
            </div>

            <div class="grid grid-cols-2 md:grid-cols-4 gap-4 mb-4">
                <!-- Uptime -->
                <div class="bg-slate-900/50 rounded-lg p-4">
                    <div class="flex items-center gap-2 mb-2">
                        <i class="fas fa-check-circle @GetUptimeIconColor(_overallHealth.SuccessRate)"></i>
                        <span class="text-xs text-slate-400">Uptime</span>
                    </div>
                    <div class="flex items-baseline gap-1">
                        <span class="text-2xl font-bold @GetUptimeTextColor(_overallHealth.SuccessRate)">
                            @_overallHealth.SuccessRate.ToString("F1")
                        </span>
                        <span class="text-sm text-slate-400">%</span>
                    </div>
                    <p class="text-xs text-slate-500 mt-1">Last @_overallHealth.SampleCount samples</p>
                </div>

                <!-- Latency -->
                <div class="bg-slate-900/50 rounded-lg p-4">
                    <div class="flex items-center gap-2 mb-2">
                        <i class="far fa-clock text-slate-400"></i>
                        <span class="text-xs text-slate-400">Avg Latency</span>
                    </div>
                    <div class="flex items-baseline gap-1">
                        <span class="text-2xl font-bold @GetLatencyTextColor(_overallHealth.AverageLatency)">
                            @Math.Round(_overallHealth.AverageLatency)
                        </span>
                        <span class="text-sm text-slate-400">ms</span>
                    </div>
                    <p class="text-xs text-slate-500 mt-1">Response time</p>
                </div>

                <!-- Jitter -->
                <div class="bg-slate-900/50 rounded-lg p-4">
                    <div class="flex items-center gap-2 mb-2">
                        <i class="fas fa-signal text-slate-400"></i>
                        <span class="text-xs text-slate-400">Jitter</span>
                    </div>
                    <div class="flex items-baseline gap-1">
                        <span class="text-2xl font-bold @GetJitterTextColor(_overallHealth.Jitter)">
                            @Math.Round(_overallHealth.Jitter, 1)
                        </span>
                        <span class="text-sm text-slate-400">ms</span>
                    </div>
                    <p class="text-xs text-slate-500 mt-1">Variation</p>
                </div>

                <!-- Stability -->
                <div class="bg-slate-900/50 rounded-lg p-4">
                    <div class="flex items-center gap-2 mb-2">
                        <i class="fas fa-chart-line text-slate-400"></i>
                        <span class="text-xs text-slate-400">Stability</span>
                    </div>
                    <div class="flex items-baseline gap-1">
                        <span class="text-2xl font-bold @GetStabilityTextColor(_overallHealth.StabilityScore)">
                            @((_overallHealth.StabilityScore * 100).ToString("F0"))
                        </span>
                        <span class="text-sm text-slate-400">%</span>
                    </div>
                    <p class="text-xs text-slate-500 mt-1">Consistency</p>
                </div>
            </div>

            <!-- Connection Quality Indicator -->
            <div class="mt-4 pt-4 border-t border-slate-700">
                <div class="flex items-center gap-3">
                    <div class="flex-shrink-0">
                        <div class="w-3 h-3 rounded-full @GetStatusIndicatorClass(_overallHealth.Status) animate-pulse"></div>
                    </div>
                    <div class="flex-grow">
                        <p class="text-sm text-slate-300">@GetStatusDescription(_overallHealth.Status)</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Uptime Chart -->
        @if (_jsModuleLoaded)
        {
            <div class="bg-slate-800/50 border border-slate-700 rounded-xl shadow-lg mb-6 p-6">
                <div class="flex items-center justify-between mb-4">
                    <h3 class="text-xl font-semibold text-white">Uptime History</h3>
                    <span class="text-sm text-slate-400">Live monitoring</span>
                </div>
                
                <div class="bg-slate-900/50 rounded-lg p-4">
                    <canvas id="uptimeChart" class="w-full" style="height: 300px;"></canvas>
                </div>
                
                <div class="mt-4 flex items-center justify-center gap-4 text-sm">
                    <div class="flex items-center gap-2">
                        <div class="w-3 h-3 bg-green-500 rounded-full"></div>
                        <span class="text-slate-300">Successful</span>
                    </div>
                    <div class="flex items-center gap-2">
                        <div class="w-3 h-3 bg-red-500 rounded-full"></div>
                        <span class="text-slate-300">Failed</span>
                    </div>
                </div>
            </div>
        }

        <!-- Quality Thresholds Info -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            <div class="bg-green-900/20 border border-green-900/30 rounded-lg p-4">
                <div class="flex items-center gap-2 mb-2">
                    <i class="fas fa-star text-green-400"></i>
                    <h4 class="font-semibold text-green-300">Excellent</h4>
                </div>
                <p class="text-xs text-slate-400">Latency &lt; 30ms<br/>Jitter &lt; 5ms<br/>Uptime &gt; 98%</p>
            </div>
            
            <div class="bg-cyan-900/20 border border-cyan-900/30 rounded-lg p-4">
                <div class="flex items-center gap-2 mb-2">
                    <i class="fas fa-check text-cyan-400"></i>
                    <h4 class="font-semibold text-cyan-300">Good</h4>
                </div>
                <p class="text-xs text-slate-400">Latency &lt; 80ms<br/>Jitter &lt; 15ms<br/>Uptime &gt; 95%</p>
            </div>
            
            <div class="bg-yellow-900/20 border border-yellow-900/30 rounded-lg p-4">
                <div class="flex items-center gap-2 mb-2">
                    <i class="fas fa-exclamation-triangle text-yellow-400"></i>
                    <h4 class="font-semibold text-yellow-300">Fair</h4>
                </div>
                <p class="text-xs text-slate-400">Latency &lt; 150ms<br/>Jitter &lt; 30ms<br/>Uptime &gt; 90%</p>
            </div>
            
            <div class="bg-red-900/20 border border-red-900/30 rounded-lg p-4">
                <div class="flex items-center gap-2 mb-2">
                    <i class="fas fa-times-circle text-red-400"></i>
                    <h4 class="font-semibold text-red-300">Poor/Critical</h4>
                </div>
                <p class="text-xs text-slate-400">High latency<br/>High jitter<br/>Low uptime</p>
            </div>
        </div>
    }
</div>

@code {
    private ConnectionHealth _overallHealth = new();
    private Timer? _updateTimer;
    private IJSObjectReference? _chartModule;
    private bool _jsModuleLoaded = false;
    private bool _chartInitialized = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Start update timer
            _updateTimer = new Timer(async _ => await InvokeAsync(UpdateHealthData), null, TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(1));
            
            // Load Chart.js module
            await LoadChartModule();
            
            // Initial data load
            await UpdateHealthData();
        }
    }

    private async Task LoadChartModule()
    {
        try
        {
            _chartModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/uptimeChart.js");
            _jsModuleLoaded = true;
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Details: Error loading chart module: {ex.Message}");
        }
    }

    private async Task UpdateHealthData()
    {
        try
        {
            _overallHealth = ConnectionHealthService.GetOverallHealth();
            
            // Initialize or update chart
            if (_jsModuleLoaded && _chartModule != null && ConnectionHealthService.IsInitialized())
            {
                if (!_chartInitialized)
                {
                    await InitializeChart();
                }
                else
                {
                    await UpdateChart();
                }
            }
            
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Details: Error updating health data: {ex.Message}");
        }
    }

    private async Task InitializeChart()
    {
        try
        {
            var success = await _chartModule!.InvokeAsync<bool>("initializeUptimeChart", "uptimeChart");
            if (success)
            {
                _chartInitialized = true;
                Console.WriteLine("Details: Uptime chart initialized successfully");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Details: Error initializing chart: {ex.Message}");
        }
    }

    private async Task UpdateChart()
    {
        try
        {
            var timestamp = DateTime.Now.ToString("HH:mm:ss");
            var successRate = _overallHealth.SuccessRate;
            var failureRate = 100 - successRate;
            
            await _chartModule!.InvokeVoidAsync("updateUptimeChart", timestamp, successRate, failureRate);
        }
        catch (JSDisconnectedException)
        {
            // Browser disconnected, stop updating
            _chartInitialized = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Details: Error updating chart: {ex.Message}");
        }
    }

    private string GetStatusBadgeClass(ConnectionStatus status)
    {
        return status switch
        {
            ConnectionStatus.Excellent => "bg-green-500/20 text-green-300 border border-green-500/30",
            ConnectionStatus.Good => "bg-cyan-500/20 text-cyan-300 border border-cyan-500/30",
            ConnectionStatus.Fair => "bg-yellow-500/20 text-yellow-300 border border-yellow-500/30",
            ConnectionStatus.Poor => "bg-orange-500/20 text-orange-300 border border-orange-500/30",
            ConnectionStatus.Critical => "bg-red-500/20 text-red-300 border border-red-500/30",
            _ => "bg-slate-500/20 text-slate-300 border border-slate-500/30"
        };
    }

    private string GetStatusText(ConnectionStatus status)
    {
        return status switch
        {
            ConnectionStatus.Excellent => "Excellent",
            ConnectionStatus.Good => "Good",
            ConnectionStatus.Fair => "Fair",
            ConnectionStatus.Poor => "Poor",
            ConnectionStatus.Critical => "Critical",
            ConnectionStatus.Initializing => "Initializing",
            _ => "Unknown"
        };
    }

    private string GetStatusIndicatorClass(ConnectionStatus status)
    {
        return status switch
        {
            ConnectionStatus.Excellent => "bg-green-500",
            ConnectionStatus.Good => "bg-cyan-500",
            ConnectionStatus.Fair => "bg-yellow-500",
            ConnectionStatus.Poor => "bg-orange-500",
            ConnectionStatus.Critical => "bg-red-500",
            _ => "bg-slate-500"
        };
    }

    private string GetStatusDescription(ConnectionStatus status)
    {
        return status switch
        {
            ConnectionStatus.Excellent => "Connection is excellent - perfect for gaming, VoIP, and streaming",
            ConnectionStatus.Good => "Connection is good - suitable for most online activities",
            ConnectionStatus.Fair => "Connection is fair - acceptable for browsing and streaming",
            ConnectionStatus.Poor => "Connection quality is degraded - may experience lag or buffering",
            ConnectionStatus.Critical => "Connection is unstable - experiencing significant issues",
            _ => "Connection status unknown"
        };
    }

    private string GetUptimeIconColor(double uptime)
    {
        if (uptime >= 98) return "text-green-400";
        if (uptime >= 95) return "text-cyan-400";
        if (uptime >= 90) return "text-yellow-400";
        return "text-red-400";
    }

    private string GetUptimeTextColor(double uptime)
    {
        if (uptime >= 98) return "text-green-400";
        if (uptime >= 95) return "text-cyan-400";
        if (uptime >= 90) return "text-yellow-400";
        return "text-red-400";
    }

    private string GetLatencyTextColor(double latency)
    {
        if (latency < 30) return "text-green-400";
        if (latency < 80) return "text-cyan-400";
        if (latency < 150) return "text-yellow-400";
        return "text-red-400";
    }

    private string GetJitterTextColor(double jitter)
    {
        if (jitter < 5) return "text-green-400";
        if (jitter < 15) return "text-cyan-400";
        if (jitter < 30) return "text-yellow-400";
        return "text-red-400";
    }

    private string GetStabilityTextColor(double stability)
    {
        if (stability >= 0.8) return "text-green-400";
        if (stability >= 0.6) return "text-cyan-400";
        if (stability >= 0.4) return "text-yellow-400";
        return "text-red-400";
    }

    public async ValueTask DisposeAsync()
    {
        _updateTimer?.Dispose();
        
        if (_chartModule != null)
        {
            try
            {
                if (_chartInitialized)
                {
                    await _chartModule.InvokeVoidAsync("disposeUptimeChart");
                }
                await _chartModule.DisposeAsync();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Details: Error disposing chart module: {ex.Message}");
            }
        }
    }
}